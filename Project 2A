{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/irashir10/irashir10-dsb219-s24-p2a/blob/main/Project%202A\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZRL8wbZU8pIn",
        "outputId": "694bb4a7-2d57-4dd1-c456-b025fc4ee368"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'read_0': 'AGGGGGAGTTAGCTTGGTGG', 'read_1': 'TGCGAGCCCAGTCAGCGTAC', 'read_2': 'CAGGTTTGTTCGGGGATTCA', 'read_3': 'AGCTTGGTGGCATCGTAATA', 'read_4': 'CAGAATGCCAGGCTTATCGG', 'read_5': 'AGACGTAGCCTCGATTCAGG', 'read_6': 'GAACGCTGCTATCAACTAAG', 'read_7': 'TAGGTCGATTTACCAGAAAG', 'read_8': 'CGTTTCAGGTCACCGGATAC', 'read_9': 'GGGGGAGTTAGCTTGGTGGC', 'read_10': 'CCGGATACCAAGTCATGCGC', 'read_11': 'AACGTATGATTTGCGAGCCC', 'read_12': 'GACGTAGCCTCGATTCAGGT', 'read_13': 'GTCGGAATTAGGTCGATTTA', 'read_14': 'TACCAAGTCATGCGCGTACG', 'read_15': 'CCAGGTCTAAGACGTAGCCT', 'read_16': 'GGGAGTTAGCTTGGTGGCAT', 'read_17': 'ATTTGCGAGCCCAGTCAGCG', 'read_18': 'TAATACATACGCGGATTGTG', 'read_19': 'GGGGATTCAACCCTAGGTCG', 'read_20': 'GCGAGCCCAGTCAGCGTACT', 'read_21': 'GGTCGATTTACCAGAAAGGT', 'read_22': 'CAGCGTACTTTTGAACACCT', 'read_23': 'GAATTAGGTCGATTTACCAG', 'read_24': 'GGTCTGCAAGGGGCCCTGTT', 'read_25': 'CAAAAACCCGGAGGTCATTG', 'read_26': 'CGGCGCCAGGTCTAAGACGT', 'read_27': 'CATGCGCGTACGCTTATCGG', 'read_28': 'AAAGGTTCCAAAAACCCGGA', 'read_29': 'CGATTTACCAGAAAGGTTCC', 'read_30': 'GCCGTTTCAGGTCACCGGAT', 'read_31': 'GGGGAGTTAGCTTGGTGGCA', 'read_32': 'TGTTATTGTCCAGGAACGCT', 'read_33': 'GTTCGGGGATTCAACCCTAG', 'read_34': 'TATGATTTGCGAGCCCAGTC', 'read_35': 'TTAGGTCGATTTACCAGAAA', 'read_36': 'GCCAGGTCTAAGACGTAGCC', 'read_37': 'TAGGTCGGAATTAGGTCGAT', 'read_38': 'GGAGTTAGCTTGGTGGCATC', 'read_39': 'GTGGCATCGTAATAACGTAT', 'read_40': 'CCTAATACATACGCGGATAG', 'read_41': 'GGCATCGTAATAACGTATGA', 'read_42': 'GTACTTTTGAACACCTAATA', 'read_43': 'GTAATAACGTATGATTTGCG', 'read_44': 'GCAACAGAATGCCAGGCTTA', 'read_45': 'CGTAGCCTCGATTCAGGTTT', 'read_46': 'CGCTTCGCATATTGTTCGTC', 'read_47': 'TCACCGGATACCAAGTCATG', 'read_48': 'AATCATGGCATAGATAGAGT', 'read_49': 'TACTTTTGAACACCTAATAC', 'read_50': 'CCAGAAAGGTTCCAAAAACC', 'read_51': 'AGTCGGCGCCAGGTCTAAGA', 'read_52': 'GGTCGGAATTAGGTCGATTT', 'read_53': 'CTTTTGAACACCTAATACAT', 'read_54': 'CGAATCATGGCATAGATAGA', 'read_55': 'GCTTATCGGCAATAAGGGGG', 'read_56': 'TCTGCAAGGGGCCCTGTTAT', 'read_57': 'TAGATAGAGTTGCTGCAGGC', 'read_58': 'TTCGGGGATTCAACCCTAGG', 'read_59': 'TGCCGTTTCAGGTCACCGGA', 'read_60': 'CGCGGATAGTCTGCCGTTTC', 'read_61': 'AACGCTGCTATCAACTAAGC', 'read_62': 'ATGCCAGGCTTATCGGCAAT', 'read_63': 'ATTAGGTCGATTTACCAGAA', 'read_64': 'CAGGTCACCGGATACCAAGT', 'read_65': 'GGTCATTGCAACAGAATGCC', 'read_66': 'GTCACCGGATACCAAGTCAT', 'read_67': 'GCCCAGTCAGCGTACTTTTG', 'read_68': 'CGAGCCCAGTCAGCGTACTT', 'read_69': 'ATTCAGGTTTGTTCGGGGAT', 'read_70': 'CTGTTATTGTCCAGGAACGC', 'read_71': 'GGAGTTAGCTTGGTGGCATC', 'read_72': 'ATGCGCGTACGCTTATCGGC', 'read_73': 'TCAGGTTTGTTCGGGGATTC', 'read_74': 'TTGTTCGGGGATTCAACCCT', 'read_75': 'TCGATTTACCAGAAAGGTTC', 'read_76': 'ACACCTAATACATACGCGGA', 'read_77': 'GGATAGTCTGCCGTTTCAGG', 'read_78': 'GTCATTGCAACAGAATGCCA', 'read_79': 'GAATCATGGCATAGATAGAG', 'read_80': 'ACACCTAATACATACGCGGA', 'read_81': 'GCGGATTGTGCTGCGTTCCA', 'read_82': 'TCGCATATTGTTCGTCAGTC', 'read_83': 'TGGTGGCATCGTAATAACGT', 'read_84': 'TAGCCTCGATTCAGGTTTGT', 'read_85': 'TTGCGAGCCCAGTCAGCGTA', 'read_86': 'CTAAGCGCTTCGCATATTGT', 'read_87': 'GAACACCTAATACATACGCG', 'read_88': 'AATTAGGTCGATTTACCAGA', 'read_89': 'TGGTGGCATCGTAATAACGT', 'read_90': 'TCATGCGCGTACGCTTATCG', 'read_91': 'GCGTACGCTTATCGGCAATA', 'read_92': 'ATGATTTGCGAGCCCAGTCA', 'read_93': 'GTGGTCTGCAAGGGGCCCTG', 'read_94': 'CCCGGAGGTCATTGCAACAG', 'read_95': 'ATCATGGCATAGATAGAGTT', 'read_96': 'CGGAGGTCATTGCAACAGAA', 'read_97': 'TTCGTCAGTCGGCGCCAGGT', 'read_98': 'GTATGATTTGCGAGCCCAGT', 'read_99': 'AGCGTACTTTTGAACACCTA', 'read_100': 'TCTGCCGTTTCAGGTCACCG', 'read_101': 'GGGCCCTGTTATTGTCCAGG', 'read_102': 'ATAGATAGAGTTGCTGCAGG', 'read_103': 'GTCTGCCGTTTCAGGTCACC', 'read_104': 'TGCTATCAACTAAGCGCTTC', 'read_105': 'AATAAGGGGGAGTTAGCTTG', 'read_106': 'ATAACGTATGATTTGCGAGC', 'read_107': 'CACCGAATCATGGCATAGAT', 'read_108': 'TACTTTTGAACACCTAATAC', 'read_109': 'GAGTTAGCTTGGTGGCATCG', 'read_110': 'TAAGCGCTTCGCATATTGTT', 'read_111': 'GTTAGCTTGGTGGCATCGTA', 'read_112': 'ATACATACGCGGATAGTCTG', 'read_113': 'TTGAACACCTAATACATACG', 'read_114': 'TGCTGCAGGCCAAATGGGGT', 'read_115': 'AGGTCACCGGATACCAAGTC', 'read_116': 'AAACCCGGAGGTCATTGCAA', 'read_117': 'GGTCACCGGATACCAAGTCA', 'read_118': 'ATCGTAATAACGTATGATTT', 'read_119': 'CTAGGTCGGAATTAGGTCGA', 'read_120': 'GAGCCCAGTCAGCGTACTTT', 'read_121': 'GTCATGCGCGTACGCTTATC', 'read_122': 'TAGAGTTGCTGCAGGCCAAA', 'read_123': 'AGCCCAGTCAGCGTACTTTT', 'read_124': 'CTAAGACGTAGCCTCGATTC', 'read_125': 'GCGCGTACGCTTATCGGCAA', 'read_126': 'CAGGAACGCTGCTATCAACT', 'read_127': 'TTTGCGAGCCCAGTCAGCGT', 'read_128': 'GCAATAAGGGGGAGTTAGCT', 'read_129': 'AGTCATGCGCGTACGCTTAT', 'read_130': 'GGGGCCCTGTTATTGTCCAG', 'read_131': 'ATAAGGGGGAGTTAGCTTGG', 'read_132': 'AGTCAGCGTACTTTTGAACA', 'read_133': 'CCAAAAACCCGGAGGTCATT', 'read_134': 'AAGGGGGAGTTAGCTTGGTG', 'read_135': 'AATGCCAGGCTTATCGGCAA', 'read_136': 'TTGGTGGCATCGTAATAACG', 'read_137': 'TCGGGGATTCAACCCTAGGT', 'read_138': 'TTCAGGTCACCGGATACCAA', 'read_139': 'TGATTTGCGAGCCCAGTCAG', 'read_140': 'GCGCTTCGCATATTGTTCGT', 'read_141': 'AGATAGAGTTGCTGCAGGCC', 'read_142': 'GTACTTTTGAACACCTAATA', 'read_143': 'AAATGGGGTGGTCTGCAAGG', 'read_144': 'GCAGGCCAAATGGGGTGGTC', 'read_145': 'TACGCTTATCGGCAATAAGG', 'read_146': 'TTCGCATATTGTTCGTCAGT', 'read_147': 'ATGGGGTGGTCTGCAAGGGG', 'read_148': 'AGTTGCTGCAGGCCAAATGG', 'read_149': 'CCAAGTCATGCGCGTACGCT', 'read_150': 'GAATGCCAGGCTTATCGGCA', 'read_151': 'GTAATAACGTATGATTTGCG', 'read_152': 'CGTACTTTTGAACACCTAAT', 'read_153': 'ATAACGTATGATTTGCGAGC', 'read_154': 'TGTCCAGGAACGCTGCTATC', 'read_155': 'CAGGCTTATCGGCAATAAGG', 'read_156': 'GGCCAAATGGGGTGGTCTGC', 'read_157': 'GAAAGGTTCCAAAAACCCGG', 'read_158': 'CGGATACCAAGTCATGCGCG', 'read_159': 'TTAGCTTGGTGGCATCGTAA', 'read_160': 'GCTATCAACTAAGCGCTTCG', 'read_161': 'GTGGCATCGTAATAACGTAT', 'read_162': 'TAGCTTGGTGGCATCGTAAT', 'read_163': 'GCAATAAGGGGGAGTTAGCT', 'read_164': 'GCCAAATGGGGTGGTCTGCA', 'read_165': 'TTTGAACACCTAATACATAC', 'read_166': 'TATCGGCAATAAGGGGGAGT', 'read_167': 'ACATACGCGGATAGTCTGCC', 'read_168': 'AAGCGCTTCGCATATTGTTC', 'read_169': 'ACTTTTGAACACCTAATACA', 'read_170': 'GCATATTGTTCGTCAGTCGG', 'read_171': 'CAGTCAGCGTACTTTTGAAC', 'read_172': 'TGCAACAGAATGCCAGGCTT', 'read_173': 'GCATCGTAATAACGTATGAT', 'read_174': 'CTGCAAGGGGCCCTGTTATT', 'read_175': 'GATTTACCAGAAAGGTTCCA', 'read_176': 'AACCCGGAGGTCATTGCAAC', 'read_177': 'AGGCCAAATGGGGTGGTCTG', 'read_178': 'CCTAGGTCGGAATTAGGTCG', 'read_179': 'CCCAGTCAGCGTACTTTTGA', 'read_180': 'TCAGGTCACCGGATACCAAG', 'read_181': 'CTAATACATACGCGGATAGT', 'read_182': 'TAAGACGTAGCCTCGATTCA', 'read_183': 'TAAGGGGGAGTTAGCTTGGT', 'read_184': 'CATGGCATAGATAGAGTTGC', 'read_185': 'GTTGCTGCAGGCCAAATGGG', 'read_186': 'CAGCGTACTTTTGAACACCT', 'read_187': 'ATACCAAGTCATGCGCGTAC', 'read_188': 'GATACCAAGTCATGCGCGTA', 'read_189': 'GCCAGGCTTATCGGCAATAA', 'read_190': 'GTTTGTTCGGGGATTCAACC', 'read_191': 'AGGTCGGAATTAGGTCGATT', 'read_192': 'CAATAAGGGGGAGTTAGCTT', 'read_193': 'ACGCTGCTATCAACTAAGCG', 'read_194': 'TCGTAATAACGTATGATTTG', 'read_195': 'TATCGGCAATAAGGGGGAGT', 'read_196': 'ATTGCAACAGAATGCCAGGC', 'read_197': 'TCCAGGAACGCTGCTATCAA', 'read_198': 'GTCTGCAAGGGGCCCTGTTA', 'read_199': 'ATTGTCCAGGAACGCTGCTA', 'read_200': 'TTCAACCCTAGGTCGGAATT', 'read_201': 'GTCTAAGACGTAGCCTCGAT', 'read_202': 'CTAATACATACGCGGATTGT', 'read_203': 'ATCGGCAATAAGGGGGAGTT', 'read_204': 'CGGAATTAGGTCGATTTACC', 'read_205': 'ACGCGGATAGTCTGCCGTTT', 'read_206': 'TTGCGAGCCCAGTCAGCGTA', 'read_207': 'CCAGTCAGCGTACTTTTGAA', 'read_208': 'TCGTCAGTCGGCGCCAGGTC', 'read_209': 'CACCTAATACATACGCGGAT', 'read_210': 'CGGATTGTGCTGCGTTCCAA', 'read_211': 'TAATAACGTATGATTTGCGA', 'read_212': 'CCAGGCTTATCGGCAATAAG', 'read_213': 'AGAATGCCAGGCTTATCGGC', 'read_214': 'GTTCCAAAAACCCGGAGGTC', 'read_215': 'CTTATCGGCAATAAGGGGGA', 'read_216': 'GGAACGCTGCTATCAACTAA', 'read_217': 'GGCCCTGTTATTGTCCAGGA', 'read_218': 'CCGTTTCAGGTCACCGGATA', 'read_219': 'CTGCTATCAACTAAGCGCTT', 'read_220': 'TCAGTCGGCGCCAGGTCTAA', 'read_221': 'TTTACCAGAAAGGTTCCAAA', 'read_222': 'ACCAAGTCATGCGCGTACGC', 'read_223': 'AGGTCATTGCAACAGAATGC', 'read_224': 'GTATGATTTGCGAGCCCAGT', 'read_225': 'TACCAGAAAGGTTCCAAAAA', 'read_226': 'GTTATTGTCCAGGAACGCTG', 'read_227': 'CAAATGGGGTGGTCTGCAAG', 'read_228': 'TTGCTGCAGGCCAAATGGGG', 'read_229': 'AGAAAGGTTCCAAAAACCCG', 'read_230': 'AGGTTCCAAAAACCCGGAGG', 'read_231': 'CATAGATAGAGTTGCTGCAG', 'read_232': 'ACAGAATGCCAGGCTTATCG', 'read_233': 'AAGGTTCCAAAAACCCGGAG', 'read_234': 'TTAGCTTGGTGGCATCGTAA', 'read_235': 'TTATCGGCAATAAGGGGGAG', 'read_236': 'ACCTAATACATACGCGGATA', 'read_237': 'ATAAGGGGGAGTTAGCTTGG', 'read_238': 'TTCCAAAAACCCGGAGGTCA', 'read_239': 'ACGTATGATTTGCGAGCCCA', 'read_240': 'TAAGGGGGAGTTAGCTTGGT', 'read_241': 'AAGGGGGAGTTAGCTTGGTG', 'read_242': 'GCTTCGCATATTGTTCGTCA', 'read_243': 'ATTTGCGAGCCCAGTCAGCG', 'read_244': 'ATACATACGCGGATTGTGCT', 'read_245': 'AGTTAGCTTGGTGGCATCGT', 'read_246': 'AAAACCCGGAGGTCATTGCA', 'read_247': 'TAATACATACGCGGATAGTC', 'read_248': 'GAGGTCATTGCAACAGAATG', 'read_249': 'TACATACGCGGATTGTGCTG', 'read_250': 'CAAGGGGCCCTGTTATTGTC', 'read_251': 'ACGCTTATCGGCAATAAGGG', 'read_252': 'CGGCAATAAGGGGGAGTTAG', 'read_253': 'CGGATAGTCTGCCGTTTCAG', 'read_254': 'ATCGGCAATAAGGGGGAGTT', 'read_255': 'CATCGTAATAACGTATGATT', 'read_256': 'CGTATGATTTGCGAGCCCAG', 'read_257': 'GGGGTGGTCTGCAAGGGGCC', 'read_258': 'CCGAATCATGGCATAGATAG', 'read_259': 'CAGTCGGCGCCAGGTCTAAG', 'read_260': 'ATTGTTCGTCAGTCGGCGCC', 'read_261': 'CAGTCAGCGTACTTTTGAAC', 'read_262': 'ATACGCGGATTGTGCTGCGT', 'read_263': 'TGCCAGGCTTATCGGCAATA', 'read_264': 'AGGAACGCTGCTATCAACTA', 'read_265': 'TCCAAAAACCCGGAGGTCAT', 'read_266': 'CGCTTATCGGCAATAAGGGG', 'read_267': 'ATATTGTTCGTCAGTCGGCG', 'read_268': 'GAGCCCAGTCAGCGTACTTT', 'read_269': 'TAACGTATGATTTGCGAGCC', 'read_270': 'CGTCAGTCGGCGCCAGGTCT', 'read_271': 'CAAGTCATGCGCGTACGCTT', 'read_272': 'AGCGTACTTTTGAACACCTA', 'read_273': 'AGGGGGAGTTAGCTTGGTGG', 'read_274': 'GCCCTGTTATTGTCCAGGAA', 'read_275': 'GATAGAGTTGCTGCAGGCCA', 'read_276': 'ACGTATGATTTGCGAGCCCA', 'read_277': 'TTTCAGGTCACCGGATACCA', 'read_278': 'CTATCAACTAAGCGCTTCGC', 'read_279': 'TACGCGGATAGTCTGCCGTT', 'read_280': 'CCAAATGGGGTGGTCTGCAA', 'read_281': 'TCGGAATTAGGTCGATTTAC', 'read_282': 'GGCAATAAGGGGGAGTTAGC', 'read_283': 'TTACCAGAAAGGTTCCAAAA', 'read_284': 'CTGCCGTTTCAGGTCACCGG', 'read_285': 'AGGTCTAAGACGTAGCCTCG', 'read_286': 'CCAGTCAGCGTACTTTTGAA', 'read_287': 'TATTGTTCGTCAGTCGGCGC', 'read_288': 'TCGGCGCCAGGTCTAAGACG', 'read_289': 'TTCAGGTTTGTTCGGGGATT', 'read_290': 'GTTAGCTTGGTGGCATCGTA', 'read_291': 'AGTCTGCCGTTTCAGGTCAC', 'read_292': 'GCGGATAGTCTGCCGTTTCA', 'read_293': 'AAGGGGCCCTGTTATTGTCC', 'read_294': 'AAGACGTAGCCTCGATTCAG', 'read_295': 'TGCAAGGGGCCCTGTTATTG', 'read_296': 'TCAACTAAGCGCTTCGCATA', 'read_297': 'TTGGTGGCATCGTAATAACG', 'read_298': 'CGCGTACGCTTATCGGCAAT', 'read_299': 'CGCGGATTGTGCTGCGTTCC', 'read_300': 'ACCCGGAGGTCATTGCAACA', 'read_301': 'TGGTCTGCAAGGGGCCCTGT', 'read_302': 'CTTTTGAACACCTAATACAT', 'read_303': 'CCTGTTATTGTCCAGGAACG', 'read_304': 'GATAGTCTGCCGTTTCAGGT', 'read_305': 'ATCGTAATAACGTATGATTT', 'read_306': 'TGTTCGGGGATTCAACCCTA', 'read_307': 'TAATAACGTATGATTTGCGA', 'read_308': 'GTACGCTTATCGGCAATAAG', 'read_309': 'TTATCGGCAATAAGGGGGAG', 'read_310': 'TATTGTCCAGGAACGCTGCT', 'read_311': 'AAAAACCCGGAGGTCATTGC', 'read_312': 'CGGCAATAAGGGGGAGTTAG', 'read_313': 'TCAGCGTACTTTTGAACACC', 'read_314': 'CCCAGTCAGCGTACTTTTGA', 'read_315': 'CATACGCGGATTGTGCTGCG', 'read_316': 'TATGATTTGCGAGCCCAGTC', 'read_317': 'CCTCGATTCAGGTTTGTTCG', 'read_318': 'ACGCGGATTGTGCTGCGTTC', 'read_319': 'TTTGCGAGCCCAGTCAGCGT', 'read_320': 'CAGGCCAAATGGGGTGGTCT', 'read_321': 'GTCGGCGCCAGGTCTAAGAC', 'read_322': 'TCGTAATAACGTATGATTTG', 'read_323': 'TACGCGGATTGTGCTGCGTT', 'read_324': 'AGTTAGCTTGGTGGCATCGT', 'read_325': 'GCTTATCGGCAATAAGGGGG', 'read_326': 'ACCTAATACATACGCGGATT', 'read_327': 'AGTCAGCGTACTTTTGAACA', 'read_328': 'CGTACTTTTGAACACCTAAT', 'read_329': 'GGCGCCAGGTCTAAGACGTA', 'read_330': 'GAGTTGCTGCAGGCCAAATG', 'read_331': 'AATACATACGCGGATAGTCT', 'read_332': 'AATACATACGCGGATTGTGC', 'read_333': 'CAATAAGGGGGAGTTAGCTT', 'read_334': 'GCGAGCCCAGTCAGCGTACT', 'read_335': 'CGGGGATTCAACCCTAGGTC', 'read_336': 'GATTCAACCCTAGGTCGGAA', 'read_337': 'GCATCGTAATAACGTATGAT', 'read_338': 'AACAGAATGCCAGGCTTATC', 'read_339': 'GCGTACTTTTGAACACCTAA', 'read_340': 'GTTCGTCAGTCGGCGCCAGG', 'read_341': 'CTTCGCATATTGTTCGTCAG', 'read_342': 'AATAAGGGGGAGTTAGCTTG', 'read_343': 'AACACCTAATACATACGCGG', 'read_344': 'ACCCTAGGTCGGAATTAGGT', 'read_345': 'CTTGGTGGCATCGTAATAAC', 'read_346': 'ATGATTTGCGAGCCCAGTCA', 'read_347': 'AATAACGTATGATTTGCGAG', 'read_348': 'GATTTGCGAGCCCAGTCAGC', 'read_349': 'GATTCAGGTTTGTTCGGGGA', 'read_350': 'TTGTTCGTCAGTCGGCGCCA', 'read_351': 'GAGTTAGCTTGGTGGCATCG', 'read_352': 'AATAACGTATGATTTGCGAG', 'read_353': 'ATAGTCTGCCGTTTCAGGTC', 'read_354': 'TGAACACCTAATACATACGC', 'read_355': 'TTATTGTCCAGGAACGCTGC', 'read_356': 'GAACACCTAATACATACGCG', 'read_357': 'TGGGGTGGTCTGCAAGGGGC', 'read_358': 'CGAGCCCAGTCAGCGTACTT', 'read_359': 'CCCTGTTATTGTCCAGGAAC', 'read_360': 'CGTAATAACGTATGATTTGC', 'read_361': 'GGTGGTCTGCAAGGGGCCCT', 'read_362': 'GGTTCCAAAAACCCGGAGGT', 'read_363': 'GGGTGGTCTGCAAGGGGCCC', 'read_364': 'GGGGAGTTAGCTTGGTGGCA', 'read_365': 'GGTCTAAGACGTAGCCTCGA', 'read_366': 'GTCAGTCGGCGCCAGGTCTA', 'read_367': 'ACATACGCGGATTGTGCTGC', 'read_368': 'CGTAATAACGTATGATTTGC', 'read_369': 'AGAGTTGCTGCAGGCCAAAT', 'read_370': 'TCAACCCTAGGTCGGAATTA', 'read_371': 'CGCTGCTATCAACTAAGCGC', 'read_372': 'CTTATCGGCAATAAGGGGGA', 'read_373': 'CCTAATACATACGCGGATTG', 'read_374': 'TGAACACCTAATACATACGC', 'read_375': 'GATTTGCGAGCCCAGTCAGC', 'read_376': 'AGGCTTATCGGCAATAAGGG', 'read_377': 'GGATACCAAGTCATGCGCGT', 'read_378': 'GCTGCTATCAACTAAGCGCT', 'read_379': 'GGCATAGATAGAGTTGCTGC', 'read_380': 'GCCTCGATTCAGGTTTGTTC', 'read_381': 'ACTAAGCGCTTCGCATATTG', 'read_382': 'CAACAGAATGCCAGGCTTAT', 'read_383': 'CGCCAGGTCTAAGACGTAGC', 'read_384': 'TGGCATCGTAATAACGTATG', 'read_385': 'TAACGTATGATTTGCGAGCC', 'read_386': 'GTCCAGGAACGCTGCTATCA', 'read_387': 'AACGTATGATTTGCGAGCCC', 'read_388': 'AGCCCAGTCAGCGTACTTTT', 'read_389': 'GGGATTCAACCCTAGGTCGG', 'read_390': 'GGCATCGTAATAACGTATGA', 'read_391': 'CTTGGTGGCATCGTAATAAC', 'read_392': 'GGATTCAACCCTAGGTCGGA', 'read_393': 'ATTTACCAGAAAGGTTCCAA', 'read_394': 'GTCAGCGTACTTTTGAACAC', 'read_395': 'TCTAAGACGTAGCCTCGATT', 'read_396': 'GCTTGGTGGCATCGTAATAA', 'read_397': 'GGAGGTCATTGCAACAGAAT', 'read_398': 'AGCGCTTCGCATATTGTTCG', 'read_399': 'TCATGGCATAGATAGAGTTG', 'read_400': 'ATCAACTAAGCGCTTCGCAT', 'read_401': 'GTCGATTTACCAGAAAGGTT', 'read_402': 'AGGTCGATTTACCAGAAAGG', 'read_403': 'CAGGTCTAAGACGTAGCCTC', 'read_404': 'AGCCTCGATTCAGGTTTGTT', 'read_405': 'TCGGCAATAAGGGGGAGTTA', 'read_406': 'CAACTAAGCGCTTCGCATAT', 'read_407': 'GCATAGATAGAGTTGCTGCA', 'read_408': 'CGATTCAGGTTTGTTCGGGG', 'read_409': 'TTGCAACAGAATGCCAGGCT', 'read_410': 'CGTACGCTTATCGGCAATAA', 'read_411': 'CAGAAAGGTTCCAAAAACCC', 'read_412': 'GCTTGGTGGCATCGTAATAA', 'read_413': 'AATGGGGTGGTCTGCAAGGG', 'read_414': 'GTAGCCTCGATTCAGGTTTG', 'read_415': 'GGAATTAGGTCGATTTACCA', 'read_416': 'GCAAGGGGCCCTGTTATTGT', 'read_417': 'TAGCTTGGTGGCATCGTAAT', 'read_418': 'TTGTCCAGGAACGCTGCTAT', 'read_419': 'TACATACGCGGATAGTCTGC', 'read_420': 'TTTTGAACACCTAATACATA', 'read_421': 'CATACGCGGATAGTCTGCCG', 'read_422': 'GGCTTATCGGCAATAAGGGG', 'read_423': 'ATTCAACCCTAGGTCGGAAT', 'read_424': 'AAGTCATGCGCGTACGCTTA', 'read_425': 'GGCAATAAGGGGGAGTTAGC', 'read_426': 'GGGGGAGTTAGCTTGGTGGC', 'read_427': 'AACTAAGCGCTTCGCATATT', 'read_428': 'ACTTTTGAACACCTAATACA', 'read_429': 'CAACCCTAGGTCGGAATTAG', 'read_430': 'TGCGAGCCCAGTCAGCGTAC', 'read_431': 'CTCGATTCAGGTTTGTTCGG', 'read_432': 'GCGTACTTTTGAACACCTAA', 'read_433': 'ACCGAATCATGGCATAGATA', 'read_434': 'TGCAGGCCAAATGGGGTGGT', 'read_435': 'AGCTTGGTGGCATCGTAATA', 'read_436': 'GCTGCAGGCCAAATGGGGTG', 'read_437': 'AGGTTTGTTCGGGGATTCAA', 'read_438': 'GGTGGCATCGTAATAACGTA', 'read_439': 'GTTTCAGGTCACCGGATACC', 'read_440': 'TAGTCTGCCGTTTCAGGTCA', 'read_441': 'CGTATGATTTGCGAGCCCAG', 'read_442': 'TTGAACACCTAATACATACG', 'read_443': 'CCAGGAACGCTGCTATCAAC', 'read_444': 'ACCGGATACCAAGTCATGCG', 'read_445': 'GCCCAGTCAGCGTACTTTTG', 'read_446': 'AACACCTAATACATACGCGG', 'read_447': 'TCGATTCAGGTTTGTTCGGG', 'read_448': 'AGGGGCCCTGTTATTGTCCA', 'read_449': 'ATGGCATAGATAGAGTTGCT', 'read_450': 'CACCGGATACCAAGTCATGC', 'read_451': 'CCCTAGGTCGGAATTAGGTC', 'read_452': 'ACCAGAAAGGTTCCAAAAAC', 'read_453': 'TGTTCGTCAGTCGGCGCCAG', 'read_454': 'TATCAACTAAGCGCTTCGCA', 'read_455': 'TCAGCGTACTTTTGAACACC', 'read_456': 'GTCAGCGTACTTTTGAACAC', 'read_457': 'CATCGTAATAACGTATGATT', 'read_458': 'GGTTTGTTCGGGGATTCAAC', 'read_459': 'ATACGCGGATAGTCTGCCGT', 'read_460': 'TGGCATCGTAATAACGTATG', 'read_461': 'CACCTAATACATACGCGGAT', 'read_462': 'CATTGCAACAGAATGCCAGG', 'read_463': 'ATAGAGTTGCTGCAGGCCAA', 'read_464': 'TGGCATAGATAGAGTTGCTG', 'read_465': 'AACCCTAGGTCGGAATTAGG', 'read_466': 'TTTGAACACCTAATACATAC', 'read_467': 'CTGCAGGCCAAATGGGGTGG', 'read_468': 'GGGAGTTAGCTTGGTGGCAT', 'read_469': 'CCGGAGGTCATTGCAACAGA', 'read_470': 'GGTGGCATCGTAATAACGTA', 'read_471': 'GCGCCAGGTCTAAGACGTAG', 'read_472': 'TGCGCGTACGCTTATCGGCA', 'read_473': 'CGCATATTGTTCGTCAGTCG', 'read_474': 'CATATTGTTCGTCAGTCGGC', 'read_475': 'TCGGCAATAAGGGGGAGTTA', 'read_476': 'TTTTGAACACCTAATACATA', 'read_477': 'TGATTTGCGAGCCCAGTCAG', 'read_478': 'ACGTAGCCTCGATTCAGGTT', 'read_479': 'TTTGTTCGGGGATTCAACCC', 'read_480': 'TCATTGCAACAGAATGCCAG'}\n"
          ]
        }
      ],
      "source": [
        "def fasta_reader_dict(filename):\n",
        "    fasta_dict = {}\n",
        "    with open(filename, 'r') as file:\n",
        "        read_id = None\n",
        "        sequence = []\n",
        "        for line in file:\n",
        "            line = line.strip()\n",
        "            if line.startswith('>'):\n",
        "                if read_id:\n",
        "                    fasta_dict[read_id] = ''.join(sequence)\n",
        "                read_id = line[1:]\n",
        "                sequence = []\n",
        "            else:\n",
        "                sequence.append(line)\n",
        "        if read_id:\n",
        "            fasta_dict[read_id] = ''.join(sequence)\n",
        "    return fasta_dict\n",
        "\n",
        "def read_fasta_list(file_path):\n",
        "    reads = []\n",
        "    with open(file_path, 'r') as file:\n",
        "        sequence = ''\n",
        "        for line in file:\n",
        "            line = line.strip()\n",
        "            if line.startswith('>'):\n",
        "                if sequence:\n",
        "                    reads.append(sequence)\n",
        "                    sequence = ''\n",
        "            else:\n",
        "                sequence += line\n",
        "        if sequence:\n",
        "            reads.append(sequence)\n",
        "    return reads\n",
        "\n",
        "fasta_filename = 'project2_sample1_spectrum.fasta'\n",
        "spectrum_reads = fasta_reader_dict(fasta_filename)\n",
        "print(spectrum_reads)\n",
        "#for x, y in spectrum_reads.items():\n",
        "    #print(x, y)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "k = 20\n",
        "t = 3\n",
        "\n",
        "#seq = 'ATGCATCGGTGAATAAGGTG'\n",
        "#spec = {'read_0': 'ATGC', 'read_1': 'ATCG', 'read_2': 'GTGA','read_3': 'ATAA', 'read_4': 'GGTG', 'read_5':'ATGC' }\n",
        "\n",
        "\n",
        "#kmers = ['ATG', 'TGA', 'GAT', 'ATC', 'TCA']\n",
        "#db_graph = {'ATG': ['TG', 'TC'], 'TGA': ['GA'], 'GAT': ['AT'], 'ATC': ['TC'], 'TCA': ['CA']}"
      ],
      "metadata": {
        "id": "lDb2tqXMl47z"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def generate_kmers(sequences, k):\n",
        "    kmers_list = {}\n",
        "    for h, seq  in sequences.items():\n",
        "        for i in range(len(seq) - k + 1):\n",
        "            kmer = seq[i:i+k]\n",
        "            if kmer not in kmers_list:  # Ensure each k-mer is added only once\n",
        "                kmers_list[kmer] = 1\n",
        "    return kmers_list\n",
        "\n",
        "kmers = generate_kmers(spectrum_reads, k)\n",
        "print(kmers)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "127rtAYS74aT",
        "outputId": "f17952ba-f38e-4765-d7ad-b349552f1de1"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'AGGGGGAGTTAGCTTGGTGG': 1, 'TGCGAGCCCAGTCAGCGTAC': 1, 'CAGGTTTGTTCGGGGATTCA': 1, 'AGCTTGGTGGCATCGTAATA': 1, 'CAGAATGCCAGGCTTATCGG': 1, 'AGACGTAGCCTCGATTCAGG': 1, 'GAACGCTGCTATCAACTAAG': 1, 'TAGGTCGATTTACCAGAAAG': 1, 'CGTTTCAGGTCACCGGATAC': 1, 'GGGGGAGTTAGCTTGGTGGC': 1, 'CCGGATACCAAGTCATGCGC': 1, 'AACGTATGATTTGCGAGCCC': 1, 'GACGTAGCCTCGATTCAGGT': 1, 'GTCGGAATTAGGTCGATTTA': 1, 'TACCAAGTCATGCGCGTACG': 1, 'CCAGGTCTAAGACGTAGCCT': 1, 'GGGAGTTAGCTTGGTGGCAT': 1, 'ATTTGCGAGCCCAGTCAGCG': 1, 'TAATACATACGCGGATTGTG': 1, 'GGGGATTCAACCCTAGGTCG': 1, 'GCGAGCCCAGTCAGCGTACT': 1, 'GGTCGATTTACCAGAAAGGT': 1, 'CAGCGTACTTTTGAACACCT': 1, 'GAATTAGGTCGATTTACCAG': 1, 'GGTCTGCAAGGGGCCCTGTT': 1, 'CAAAAACCCGGAGGTCATTG': 1, 'CGGCGCCAGGTCTAAGACGT': 1, 'CATGCGCGTACGCTTATCGG': 1, 'AAAGGTTCCAAAAACCCGGA': 1, 'CGATTTACCAGAAAGGTTCC': 1, 'GCCGTTTCAGGTCACCGGAT': 1, 'GGGGAGTTAGCTTGGTGGCA': 1, 'TGTTATTGTCCAGGAACGCT': 1, 'GTTCGGGGATTCAACCCTAG': 1, 'TATGATTTGCGAGCCCAGTC': 1, 'TTAGGTCGATTTACCAGAAA': 1, 'GCCAGGTCTAAGACGTAGCC': 1, 'TAGGTCGGAATTAGGTCGAT': 1, 'GGAGTTAGCTTGGTGGCATC': 1, 'GTGGCATCGTAATAACGTAT': 1, 'CCTAATACATACGCGGATAG': 1, 'GGCATCGTAATAACGTATGA': 1, 'GTACTTTTGAACACCTAATA': 1, 'GTAATAACGTATGATTTGCG': 1, 'GCAACAGAATGCCAGGCTTA': 1, 'CGTAGCCTCGATTCAGGTTT': 1, 'CGCTTCGCATATTGTTCGTC': 1, 'TCACCGGATACCAAGTCATG': 1, 'AATCATGGCATAGATAGAGT': 1, 'TACTTTTGAACACCTAATAC': 1, 'CCAGAAAGGTTCCAAAAACC': 1, 'AGTCGGCGCCAGGTCTAAGA': 1, 'GGTCGGAATTAGGTCGATTT': 1, 'CTTTTGAACACCTAATACAT': 1, 'CGAATCATGGCATAGATAGA': 1, 'GCTTATCGGCAATAAGGGGG': 1, 'TCTGCAAGGGGCCCTGTTAT': 1, 'TAGATAGAGTTGCTGCAGGC': 1, 'TTCGGGGATTCAACCCTAGG': 1, 'TGCCGTTTCAGGTCACCGGA': 1, 'CGCGGATAGTCTGCCGTTTC': 1, 'AACGCTGCTATCAACTAAGC': 1, 'ATGCCAGGCTTATCGGCAAT': 1, 'ATTAGGTCGATTTACCAGAA': 1, 'CAGGTCACCGGATACCAAGT': 1, 'GGTCATTGCAACAGAATGCC': 1, 'GTCACCGGATACCAAGTCAT': 1, 'GCCCAGTCAGCGTACTTTTG': 1, 'CGAGCCCAGTCAGCGTACTT': 1, 'ATTCAGGTTTGTTCGGGGAT': 1, 'CTGTTATTGTCCAGGAACGC': 1, 'ATGCGCGTACGCTTATCGGC': 1, 'TCAGGTTTGTTCGGGGATTC': 1, 'TTGTTCGGGGATTCAACCCT': 1, 'TCGATTTACCAGAAAGGTTC': 1, 'ACACCTAATACATACGCGGA': 1, 'GGATAGTCTGCCGTTTCAGG': 1, 'GTCATTGCAACAGAATGCCA': 1, 'GAATCATGGCATAGATAGAG': 1, 'GCGGATTGTGCTGCGTTCCA': 1, 'TCGCATATTGTTCGTCAGTC': 1, 'TGGTGGCATCGTAATAACGT': 1, 'TAGCCTCGATTCAGGTTTGT': 1, 'TTGCGAGCCCAGTCAGCGTA': 1, 'CTAAGCGCTTCGCATATTGT': 1, 'GAACACCTAATACATACGCG': 1, 'AATTAGGTCGATTTACCAGA': 1, 'TCATGCGCGTACGCTTATCG': 1, 'GCGTACGCTTATCGGCAATA': 1, 'ATGATTTGCGAGCCCAGTCA': 1, 'GTGGTCTGCAAGGGGCCCTG': 1, 'CCCGGAGGTCATTGCAACAG': 1, 'ATCATGGCATAGATAGAGTT': 1, 'CGGAGGTCATTGCAACAGAA': 1, 'TTCGTCAGTCGGCGCCAGGT': 1, 'GTATGATTTGCGAGCCCAGT': 1, 'AGCGTACTTTTGAACACCTA': 1, 'TCTGCCGTTTCAGGTCACCG': 1, 'GGGCCCTGTTATTGTCCAGG': 1, 'ATAGATAGAGTTGCTGCAGG': 1, 'GTCTGCCGTTTCAGGTCACC': 1, 'TGCTATCAACTAAGCGCTTC': 1, 'AATAAGGGGGAGTTAGCTTG': 1, 'ATAACGTATGATTTGCGAGC': 1, 'CACCGAATCATGGCATAGAT': 1, 'GAGTTAGCTTGGTGGCATCG': 1, 'TAAGCGCTTCGCATATTGTT': 1, 'GTTAGCTTGGTGGCATCGTA': 1, 'ATACATACGCGGATAGTCTG': 1, 'TTGAACACCTAATACATACG': 1, 'TGCTGCAGGCCAAATGGGGT': 1, 'AGGTCACCGGATACCAAGTC': 1, 'AAACCCGGAGGTCATTGCAA': 1, 'GGTCACCGGATACCAAGTCA': 1, 'ATCGTAATAACGTATGATTT': 1, 'CTAGGTCGGAATTAGGTCGA': 1, 'GAGCCCAGTCAGCGTACTTT': 1, 'GTCATGCGCGTACGCTTATC': 1, 'TAGAGTTGCTGCAGGCCAAA': 1, 'AGCCCAGTCAGCGTACTTTT': 1, 'CTAAGACGTAGCCTCGATTC': 1, 'GCGCGTACGCTTATCGGCAA': 1, 'CAGGAACGCTGCTATCAACT': 1, 'TTTGCGAGCCCAGTCAGCGT': 1, 'GCAATAAGGGGGAGTTAGCT': 1, 'AGTCATGCGCGTACGCTTAT': 1, 'GGGGCCCTGTTATTGTCCAG': 1, 'ATAAGGGGGAGTTAGCTTGG': 1, 'AGTCAGCGTACTTTTGAACA': 1, 'CCAAAAACCCGGAGGTCATT': 1, 'AAGGGGGAGTTAGCTTGGTG': 1, 'AATGCCAGGCTTATCGGCAA': 1, 'TTGGTGGCATCGTAATAACG': 1, 'TCGGGGATTCAACCCTAGGT': 1, 'TTCAGGTCACCGGATACCAA': 1, 'TGATTTGCGAGCCCAGTCAG': 1, 'GCGCTTCGCATATTGTTCGT': 1, 'AGATAGAGTTGCTGCAGGCC': 1, 'AAATGGGGTGGTCTGCAAGG': 1, 'GCAGGCCAAATGGGGTGGTC': 1, 'TACGCTTATCGGCAATAAGG': 1, 'TTCGCATATTGTTCGTCAGT': 1, 'ATGGGGTGGTCTGCAAGGGG': 1, 'AGTTGCTGCAGGCCAAATGG': 1, 'CCAAGTCATGCGCGTACGCT': 1, 'GAATGCCAGGCTTATCGGCA': 1, 'CGTACTTTTGAACACCTAAT': 1, 'TGTCCAGGAACGCTGCTATC': 1, 'CAGGCTTATCGGCAATAAGG': 1, 'GGCCAAATGGGGTGGTCTGC': 1, 'GAAAGGTTCCAAAAACCCGG': 1, 'CGGATACCAAGTCATGCGCG': 1, 'TTAGCTTGGTGGCATCGTAA': 1, 'GCTATCAACTAAGCGCTTCG': 1, 'TAGCTTGGTGGCATCGTAAT': 1, 'GCCAAATGGGGTGGTCTGCA': 1, 'TTTGAACACCTAATACATAC': 1, 'TATCGGCAATAAGGGGGAGT': 1, 'ACATACGCGGATAGTCTGCC': 1, 'AAGCGCTTCGCATATTGTTC': 1, 'ACTTTTGAACACCTAATACA': 1, 'GCATATTGTTCGTCAGTCGG': 1, 'CAGTCAGCGTACTTTTGAAC': 1, 'TGCAACAGAATGCCAGGCTT': 1, 'GCATCGTAATAACGTATGAT': 1, 'CTGCAAGGGGCCCTGTTATT': 1, 'GATTTACCAGAAAGGTTCCA': 1, 'AACCCGGAGGTCATTGCAAC': 1, 'AGGCCAAATGGGGTGGTCTG': 1, 'CCTAGGTCGGAATTAGGTCG': 1, 'CCCAGTCAGCGTACTTTTGA': 1, 'TCAGGTCACCGGATACCAAG': 1, 'CTAATACATACGCGGATAGT': 1, 'TAAGACGTAGCCTCGATTCA': 1, 'TAAGGGGGAGTTAGCTTGGT': 1, 'CATGGCATAGATAGAGTTGC': 1, 'GTTGCTGCAGGCCAAATGGG': 1, 'ATACCAAGTCATGCGCGTAC': 1, 'GATACCAAGTCATGCGCGTA': 1, 'GCCAGGCTTATCGGCAATAA': 1, 'GTTTGTTCGGGGATTCAACC': 1, 'AGGTCGGAATTAGGTCGATT': 1, 'CAATAAGGGGGAGTTAGCTT': 1, 'ACGCTGCTATCAACTAAGCG': 1, 'TCGTAATAACGTATGATTTG': 1, 'ATTGCAACAGAATGCCAGGC': 1, 'TCCAGGAACGCTGCTATCAA': 1, 'GTCTGCAAGGGGCCCTGTTA': 1, 'ATTGTCCAGGAACGCTGCTA': 1, 'TTCAACCCTAGGTCGGAATT': 1, 'GTCTAAGACGTAGCCTCGAT': 1, 'CTAATACATACGCGGATTGT': 1, 'ATCGGCAATAAGGGGGAGTT': 1, 'CGGAATTAGGTCGATTTACC': 1, 'ACGCGGATAGTCTGCCGTTT': 1, 'CCAGTCAGCGTACTTTTGAA': 1, 'TCGTCAGTCGGCGCCAGGTC': 1, 'CACCTAATACATACGCGGAT': 1, 'CGGATTGTGCTGCGTTCCAA': 1, 'TAATAACGTATGATTTGCGA': 1, 'CCAGGCTTATCGGCAATAAG': 1, 'AGAATGCCAGGCTTATCGGC': 1, 'GTTCCAAAAACCCGGAGGTC': 1, 'CTTATCGGCAATAAGGGGGA': 1, 'GGAACGCTGCTATCAACTAA': 1, 'GGCCCTGTTATTGTCCAGGA': 1, 'CCGTTTCAGGTCACCGGATA': 1, 'CTGCTATCAACTAAGCGCTT': 1, 'TCAGTCGGCGCCAGGTCTAA': 1, 'TTTACCAGAAAGGTTCCAAA': 1, 'ACCAAGTCATGCGCGTACGC': 1, 'AGGTCATTGCAACAGAATGC': 1, 'TACCAGAAAGGTTCCAAAAA': 1, 'GTTATTGTCCAGGAACGCTG': 1, 'CAAATGGGGTGGTCTGCAAG': 1, 'TTGCTGCAGGCCAAATGGGG': 1, 'AGAAAGGTTCCAAAAACCCG': 1, 'AGGTTCCAAAAACCCGGAGG': 1, 'CATAGATAGAGTTGCTGCAG': 1, 'ACAGAATGCCAGGCTTATCG': 1, 'AAGGTTCCAAAAACCCGGAG': 1, 'TTATCGGCAATAAGGGGGAG': 1, 'ACCTAATACATACGCGGATA': 1, 'TTCCAAAAACCCGGAGGTCA': 1, 'ACGTATGATTTGCGAGCCCA': 1, 'GCTTCGCATATTGTTCGTCA': 1, 'ATACATACGCGGATTGTGCT': 1, 'AGTTAGCTTGGTGGCATCGT': 1, 'AAAACCCGGAGGTCATTGCA': 1, 'TAATACATACGCGGATAGTC': 1, 'GAGGTCATTGCAACAGAATG': 1, 'TACATACGCGGATTGTGCTG': 1, 'CAAGGGGCCCTGTTATTGTC': 1, 'ACGCTTATCGGCAATAAGGG': 1, 'CGGCAATAAGGGGGAGTTAG': 1, 'CGGATAGTCTGCCGTTTCAG': 1, 'CATCGTAATAACGTATGATT': 1, 'CGTATGATTTGCGAGCCCAG': 1, 'GGGGTGGTCTGCAAGGGGCC': 1, 'CCGAATCATGGCATAGATAG': 1, 'CAGTCGGCGCCAGGTCTAAG': 1, 'ATTGTTCGTCAGTCGGCGCC': 1, 'ATACGCGGATTGTGCTGCGT': 1, 'TGCCAGGCTTATCGGCAATA': 1, 'AGGAACGCTGCTATCAACTA': 1, 'TCCAAAAACCCGGAGGTCAT': 1, 'CGCTTATCGGCAATAAGGGG': 1, 'ATATTGTTCGTCAGTCGGCG': 1, 'TAACGTATGATTTGCGAGCC': 1, 'CGTCAGTCGGCGCCAGGTCT': 1, 'CAAGTCATGCGCGTACGCTT': 1, 'GCCCTGTTATTGTCCAGGAA': 1, 'GATAGAGTTGCTGCAGGCCA': 1, 'TTTCAGGTCACCGGATACCA': 1, 'CTATCAACTAAGCGCTTCGC': 1, 'TACGCGGATAGTCTGCCGTT': 1, 'CCAAATGGGGTGGTCTGCAA': 1, 'TCGGAATTAGGTCGATTTAC': 1, 'GGCAATAAGGGGGAGTTAGC': 1, 'TTACCAGAAAGGTTCCAAAA': 1, 'CTGCCGTTTCAGGTCACCGG': 1, 'AGGTCTAAGACGTAGCCTCG': 1, 'TATTGTTCGTCAGTCGGCGC': 1, 'TCGGCGCCAGGTCTAAGACG': 1, 'TTCAGGTTTGTTCGGGGATT': 1, 'AGTCTGCCGTTTCAGGTCAC': 1, 'GCGGATAGTCTGCCGTTTCA': 1, 'AAGGGGCCCTGTTATTGTCC': 1, 'AAGACGTAGCCTCGATTCAG': 1, 'TGCAAGGGGCCCTGTTATTG': 1, 'TCAACTAAGCGCTTCGCATA': 1, 'CGCGTACGCTTATCGGCAAT': 1, 'CGCGGATTGTGCTGCGTTCC': 1, 'ACCCGGAGGTCATTGCAACA': 1, 'TGGTCTGCAAGGGGCCCTGT': 1, 'CCTGTTATTGTCCAGGAACG': 1, 'GATAGTCTGCCGTTTCAGGT': 1, 'TGTTCGGGGATTCAACCCTA': 1, 'GTACGCTTATCGGCAATAAG': 1, 'TATTGTCCAGGAACGCTGCT': 1, 'AAAAACCCGGAGGTCATTGC': 1, 'TCAGCGTACTTTTGAACACC': 1, 'CATACGCGGATTGTGCTGCG': 1, 'CCTCGATTCAGGTTTGTTCG': 1, 'ACGCGGATTGTGCTGCGTTC': 1, 'CAGGCCAAATGGGGTGGTCT': 1, 'GTCGGCGCCAGGTCTAAGAC': 1, 'TACGCGGATTGTGCTGCGTT': 1, 'ACCTAATACATACGCGGATT': 1, 'GGCGCCAGGTCTAAGACGTA': 1, 'GAGTTGCTGCAGGCCAAATG': 1, 'AATACATACGCGGATAGTCT': 1, 'AATACATACGCGGATTGTGC': 1, 'CGGGGATTCAACCCTAGGTC': 1, 'GATTCAACCCTAGGTCGGAA': 1, 'AACAGAATGCCAGGCTTATC': 1, 'GCGTACTTTTGAACACCTAA': 1, 'GTTCGTCAGTCGGCGCCAGG': 1, 'CTTCGCATATTGTTCGTCAG': 1, 'AACACCTAATACATACGCGG': 1, 'ACCCTAGGTCGGAATTAGGT': 1, 'CTTGGTGGCATCGTAATAAC': 1, 'AATAACGTATGATTTGCGAG': 1, 'GATTTGCGAGCCCAGTCAGC': 1, 'GATTCAGGTTTGTTCGGGGA': 1, 'TTGTTCGTCAGTCGGCGCCA': 1, 'ATAGTCTGCCGTTTCAGGTC': 1, 'TGAACACCTAATACATACGC': 1, 'TTATTGTCCAGGAACGCTGC': 1, 'TGGGGTGGTCTGCAAGGGGC': 1, 'CCCTGTTATTGTCCAGGAAC': 1, 'CGTAATAACGTATGATTTGC': 1, 'GGTGGTCTGCAAGGGGCCCT': 1, 'GGTTCCAAAAACCCGGAGGT': 1, 'GGGTGGTCTGCAAGGGGCCC': 1, 'GGTCTAAGACGTAGCCTCGA': 1, 'GTCAGTCGGCGCCAGGTCTA': 1, 'ACATACGCGGATTGTGCTGC': 1, 'AGAGTTGCTGCAGGCCAAAT': 1, 'TCAACCCTAGGTCGGAATTA': 1, 'CGCTGCTATCAACTAAGCGC': 1, 'CCTAATACATACGCGGATTG': 1, 'AGGCTTATCGGCAATAAGGG': 1, 'GGATACCAAGTCATGCGCGT': 1, 'GCTGCTATCAACTAAGCGCT': 1, 'GGCATAGATAGAGTTGCTGC': 1, 'GCCTCGATTCAGGTTTGTTC': 1, 'ACTAAGCGCTTCGCATATTG': 1, 'CAACAGAATGCCAGGCTTAT': 1, 'CGCCAGGTCTAAGACGTAGC': 1, 'TGGCATCGTAATAACGTATG': 1, 'GTCCAGGAACGCTGCTATCA': 1, 'GGGATTCAACCCTAGGTCGG': 1, 'GGATTCAACCCTAGGTCGGA': 1, 'ATTTACCAGAAAGGTTCCAA': 1, 'GTCAGCGTACTTTTGAACAC': 1, 'TCTAAGACGTAGCCTCGATT': 1, 'GCTTGGTGGCATCGTAATAA': 1, 'GGAGGTCATTGCAACAGAAT': 1, 'AGCGCTTCGCATATTGTTCG': 1, 'TCATGGCATAGATAGAGTTG': 1, 'ATCAACTAAGCGCTTCGCAT': 1, 'GTCGATTTACCAGAAAGGTT': 1, 'AGGTCGATTTACCAGAAAGG': 1, 'CAGGTCTAAGACGTAGCCTC': 1, 'AGCCTCGATTCAGGTTTGTT': 1, 'TCGGCAATAAGGGGGAGTTA': 1, 'CAACTAAGCGCTTCGCATAT': 1, 'GCATAGATAGAGTTGCTGCA': 1, 'CGATTCAGGTTTGTTCGGGG': 1, 'TTGCAACAGAATGCCAGGCT': 1, 'CGTACGCTTATCGGCAATAA': 1, 'CAGAAAGGTTCCAAAAACCC': 1, 'AATGGGGTGGTCTGCAAGGG': 1, 'GTAGCCTCGATTCAGGTTTG': 1, 'GGAATTAGGTCGATTTACCA': 1, 'GCAAGGGGCCCTGTTATTGT': 1, 'TTGTCCAGGAACGCTGCTAT': 1, 'TACATACGCGGATAGTCTGC': 1, 'TTTTGAACACCTAATACATA': 1, 'CATACGCGGATAGTCTGCCG': 1, 'GGCTTATCGGCAATAAGGGG': 1, 'ATTCAACCCTAGGTCGGAAT': 1, 'AAGTCATGCGCGTACGCTTA': 1, 'AACTAAGCGCTTCGCATATT': 1, 'CAACCCTAGGTCGGAATTAG': 1, 'CTCGATTCAGGTTTGTTCGG': 1, 'ACCGAATCATGGCATAGATA': 1, 'TGCAGGCCAAATGGGGTGGT': 1, 'GCTGCAGGCCAAATGGGGTG': 1, 'AGGTTTGTTCGGGGATTCAA': 1, 'GGTGGCATCGTAATAACGTA': 1, 'GTTTCAGGTCACCGGATACC': 1, 'TAGTCTGCCGTTTCAGGTCA': 1, 'CCAGGAACGCTGCTATCAAC': 1, 'ACCGGATACCAAGTCATGCG': 1, 'TCGATTCAGGTTTGTTCGGG': 1, 'AGGGGCCCTGTTATTGTCCA': 1, 'ATGGCATAGATAGAGTTGCT': 1, 'CACCGGATACCAAGTCATGC': 1, 'CCCTAGGTCGGAATTAGGTC': 1, 'ACCAGAAAGGTTCCAAAAAC': 1, 'TGTTCGTCAGTCGGCGCCAG': 1, 'TATCAACTAAGCGCTTCGCA': 1, 'GGTTTGTTCGGGGATTCAAC': 1, 'ATACGCGGATAGTCTGCCGT': 1, 'CATTGCAACAGAATGCCAGG': 1, 'ATAGAGTTGCTGCAGGCCAA': 1, 'TGGCATAGATAGAGTTGCTG': 1, 'AACCCTAGGTCGGAATTAGG': 1, 'CTGCAGGCCAAATGGGGTGG': 1, 'CCGGAGGTCATTGCAACAGA': 1, 'GCGCCAGGTCTAAGACGTAG': 1, 'TGCGCGTACGCTTATCGGCA': 1, 'CGCATATTGTTCGTCAGTCG': 1, 'CATATTGTTCGTCAGTCGGC': 1, 'ACGTAGCCTCGATTCAGGTT': 1, 'TTTGTTCGGGGATTCAACCC': 1, 'TCATTGCAACAGAATGCCAG': 1}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def de_bruijn_string(kmer_dict):\n",
        "    from collections import defaultdict\n",
        "    de_bruijn_graph = defaultdict(list)\n",
        "    #for kmer, count in kmer_dict.items():\n",
        "    for kmer in kmer_dict:\n",
        "        #count = kmer_dict[kmer]\n",
        "        prefix = kmer[:-1]\n",
        "        suffix = kmer[1:]\n",
        "        #for _ in range(count):  # Add suffix multiple times based on frequency\n",
        "        de_bruijn_graph[prefix].append(suffix)\n",
        "    return de_bruijn_graph\n",
        "db_graph = de_bruijn_string(kmers)\n",
        "\n",
        "print(db_graph)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2D2lYDTVAPVL",
        "outputId": "0a086f1a-fcfd-448f-c888-a6e836b690b4"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "defaultdict(<class 'list'>, {'AGGGGGAGTTAGCTTGGTG': ['GGGGGAGTTAGCTTGGTGG'], 'TGCGAGCCCAGTCAGCGTA': ['GCGAGCCCAGTCAGCGTAC'], 'CAGGTTTGTTCGGGGATTC': ['AGGTTTGTTCGGGGATTCA'], 'AGCTTGGTGGCATCGTAAT': ['GCTTGGTGGCATCGTAATA'], 'CAGAATGCCAGGCTTATCG': ['AGAATGCCAGGCTTATCGG'], 'AGACGTAGCCTCGATTCAG': ['GACGTAGCCTCGATTCAGG'], 'GAACGCTGCTATCAACTAA': ['AACGCTGCTATCAACTAAG'], 'TAGGTCGATTTACCAGAAA': ['AGGTCGATTTACCAGAAAG'], 'CGTTTCAGGTCACCGGATA': ['GTTTCAGGTCACCGGATAC'], 'GGGGGAGTTAGCTTGGTGG': ['GGGGAGTTAGCTTGGTGGC'], 'CCGGATACCAAGTCATGCG': ['CGGATACCAAGTCATGCGC'], 'AACGTATGATTTGCGAGCC': ['ACGTATGATTTGCGAGCCC'], 'GACGTAGCCTCGATTCAGG': ['ACGTAGCCTCGATTCAGGT'], 'GTCGGAATTAGGTCGATTT': ['TCGGAATTAGGTCGATTTA'], 'TACCAAGTCATGCGCGTAC': ['ACCAAGTCATGCGCGTACG'], 'CCAGGTCTAAGACGTAGCC': ['CAGGTCTAAGACGTAGCCT'], 'GGGAGTTAGCTTGGTGGCA': ['GGAGTTAGCTTGGTGGCAT'], 'ATTTGCGAGCCCAGTCAGC': ['TTTGCGAGCCCAGTCAGCG'], 'TAATACATACGCGGATTGT': ['AATACATACGCGGATTGTG'], 'GGGGATTCAACCCTAGGTC': ['GGGATTCAACCCTAGGTCG'], 'GCGAGCCCAGTCAGCGTAC': ['CGAGCCCAGTCAGCGTACT'], 'GGTCGATTTACCAGAAAGG': ['GTCGATTTACCAGAAAGGT'], 'CAGCGTACTTTTGAACACC': ['AGCGTACTTTTGAACACCT'], 'GAATTAGGTCGATTTACCA': ['AATTAGGTCGATTTACCAG'], 'GGTCTGCAAGGGGCCCTGT': ['GTCTGCAAGGGGCCCTGTT'], 'CAAAAACCCGGAGGTCATT': ['AAAAACCCGGAGGTCATTG'], 'CGGCGCCAGGTCTAAGACG': ['GGCGCCAGGTCTAAGACGT'], 'CATGCGCGTACGCTTATCG': ['ATGCGCGTACGCTTATCGG'], 'AAAGGTTCCAAAAACCCGG': ['AAGGTTCCAAAAACCCGGA'], 'CGATTTACCAGAAAGGTTC': ['GATTTACCAGAAAGGTTCC'], 'GCCGTTTCAGGTCACCGGA': ['CCGTTTCAGGTCACCGGAT'], 'GGGGAGTTAGCTTGGTGGC': ['GGGAGTTAGCTTGGTGGCA'], 'TGTTATTGTCCAGGAACGC': ['GTTATTGTCCAGGAACGCT'], 'GTTCGGGGATTCAACCCTA': ['TTCGGGGATTCAACCCTAG'], 'TATGATTTGCGAGCCCAGT': ['ATGATTTGCGAGCCCAGTC'], 'TTAGGTCGATTTACCAGAA': ['TAGGTCGATTTACCAGAAA'], 'GCCAGGTCTAAGACGTAGC': ['CCAGGTCTAAGACGTAGCC'], 'TAGGTCGGAATTAGGTCGA': ['AGGTCGGAATTAGGTCGAT'], 'GGAGTTAGCTTGGTGGCAT': ['GAGTTAGCTTGGTGGCATC'], 'GTGGCATCGTAATAACGTA': ['TGGCATCGTAATAACGTAT'], 'CCTAATACATACGCGGATA': ['CTAATACATACGCGGATAG'], 'GGCATCGTAATAACGTATG': ['GCATCGTAATAACGTATGA'], 'GTACTTTTGAACACCTAAT': ['TACTTTTGAACACCTAATA'], 'GTAATAACGTATGATTTGC': ['TAATAACGTATGATTTGCG'], 'GCAACAGAATGCCAGGCTT': ['CAACAGAATGCCAGGCTTA'], 'CGTAGCCTCGATTCAGGTT': ['GTAGCCTCGATTCAGGTTT'], 'CGCTTCGCATATTGTTCGT': ['GCTTCGCATATTGTTCGTC'], 'TCACCGGATACCAAGTCAT': ['CACCGGATACCAAGTCATG'], 'AATCATGGCATAGATAGAG': ['ATCATGGCATAGATAGAGT'], 'TACTTTTGAACACCTAATA': ['ACTTTTGAACACCTAATAC'], 'CCAGAAAGGTTCCAAAAAC': ['CAGAAAGGTTCCAAAAACC'], 'AGTCGGCGCCAGGTCTAAG': ['GTCGGCGCCAGGTCTAAGA'], 'GGTCGGAATTAGGTCGATT': ['GTCGGAATTAGGTCGATTT'], 'CTTTTGAACACCTAATACA': ['TTTTGAACACCTAATACAT'], 'CGAATCATGGCATAGATAG': ['GAATCATGGCATAGATAGA'], 'GCTTATCGGCAATAAGGGG': ['CTTATCGGCAATAAGGGGG'], 'TCTGCAAGGGGCCCTGTTA': ['CTGCAAGGGGCCCTGTTAT'], 'TAGATAGAGTTGCTGCAGG': ['AGATAGAGTTGCTGCAGGC'], 'TTCGGGGATTCAACCCTAG': ['TCGGGGATTCAACCCTAGG'], 'TGCCGTTTCAGGTCACCGG': ['GCCGTTTCAGGTCACCGGA'], 'CGCGGATAGTCTGCCGTTT': ['GCGGATAGTCTGCCGTTTC'], 'AACGCTGCTATCAACTAAG': ['ACGCTGCTATCAACTAAGC'], 'ATGCCAGGCTTATCGGCAA': ['TGCCAGGCTTATCGGCAAT'], 'ATTAGGTCGATTTACCAGA': ['TTAGGTCGATTTACCAGAA'], 'CAGGTCACCGGATACCAAG': ['AGGTCACCGGATACCAAGT'], 'GGTCATTGCAACAGAATGC': ['GTCATTGCAACAGAATGCC'], 'GTCACCGGATACCAAGTCA': ['TCACCGGATACCAAGTCAT'], 'GCCCAGTCAGCGTACTTTT': ['CCCAGTCAGCGTACTTTTG'], 'CGAGCCCAGTCAGCGTACT': ['GAGCCCAGTCAGCGTACTT'], 'ATTCAGGTTTGTTCGGGGA': ['TTCAGGTTTGTTCGGGGAT'], 'CTGTTATTGTCCAGGAACG': ['TGTTATTGTCCAGGAACGC'], 'ATGCGCGTACGCTTATCGG': ['TGCGCGTACGCTTATCGGC'], 'TCAGGTTTGTTCGGGGATT': ['CAGGTTTGTTCGGGGATTC'], 'TTGTTCGGGGATTCAACCC': ['TGTTCGGGGATTCAACCCT'], 'TCGATTTACCAGAAAGGTT': ['CGATTTACCAGAAAGGTTC'], 'ACACCTAATACATACGCGG': ['CACCTAATACATACGCGGA'], 'GGATAGTCTGCCGTTTCAG': ['GATAGTCTGCCGTTTCAGG'], 'GTCATTGCAACAGAATGCC': ['TCATTGCAACAGAATGCCA'], 'GAATCATGGCATAGATAGA': ['AATCATGGCATAGATAGAG'], 'GCGGATTGTGCTGCGTTCC': ['CGGATTGTGCTGCGTTCCA'], 'TCGCATATTGTTCGTCAGT': ['CGCATATTGTTCGTCAGTC'], 'TGGTGGCATCGTAATAACG': ['GGTGGCATCGTAATAACGT'], 'TAGCCTCGATTCAGGTTTG': ['AGCCTCGATTCAGGTTTGT'], 'TTGCGAGCCCAGTCAGCGT': ['TGCGAGCCCAGTCAGCGTA'], 'CTAAGCGCTTCGCATATTG': ['TAAGCGCTTCGCATATTGT'], 'GAACACCTAATACATACGC': ['AACACCTAATACATACGCG'], 'AATTAGGTCGATTTACCAG': ['ATTAGGTCGATTTACCAGA'], 'TCATGCGCGTACGCTTATC': ['CATGCGCGTACGCTTATCG'], 'GCGTACGCTTATCGGCAAT': ['CGTACGCTTATCGGCAATA'], 'ATGATTTGCGAGCCCAGTC': ['TGATTTGCGAGCCCAGTCA'], 'GTGGTCTGCAAGGGGCCCT': ['TGGTCTGCAAGGGGCCCTG'], 'CCCGGAGGTCATTGCAACA': ['CCGGAGGTCATTGCAACAG'], 'ATCATGGCATAGATAGAGT': ['TCATGGCATAGATAGAGTT'], 'CGGAGGTCATTGCAACAGA': ['GGAGGTCATTGCAACAGAA'], 'TTCGTCAGTCGGCGCCAGG': ['TCGTCAGTCGGCGCCAGGT'], 'GTATGATTTGCGAGCCCAG': ['TATGATTTGCGAGCCCAGT'], 'AGCGTACTTTTGAACACCT': ['GCGTACTTTTGAACACCTA'], 'TCTGCCGTTTCAGGTCACC': ['CTGCCGTTTCAGGTCACCG'], 'GGGCCCTGTTATTGTCCAG': ['GGCCCTGTTATTGTCCAGG'], 'ATAGATAGAGTTGCTGCAG': ['TAGATAGAGTTGCTGCAGG'], 'GTCTGCCGTTTCAGGTCAC': ['TCTGCCGTTTCAGGTCACC'], 'TGCTATCAACTAAGCGCTT': ['GCTATCAACTAAGCGCTTC'], 'AATAAGGGGGAGTTAGCTT': ['ATAAGGGGGAGTTAGCTTG'], 'ATAACGTATGATTTGCGAG': ['TAACGTATGATTTGCGAGC'], 'CACCGAATCATGGCATAGA': ['ACCGAATCATGGCATAGAT'], 'GAGTTAGCTTGGTGGCATC': ['AGTTAGCTTGGTGGCATCG'], 'TAAGCGCTTCGCATATTGT': ['AAGCGCTTCGCATATTGTT'], 'GTTAGCTTGGTGGCATCGT': ['TTAGCTTGGTGGCATCGTA'], 'ATACATACGCGGATAGTCT': ['TACATACGCGGATAGTCTG'], 'TTGAACACCTAATACATAC': ['TGAACACCTAATACATACG'], 'TGCTGCAGGCCAAATGGGG': ['GCTGCAGGCCAAATGGGGT'], 'AGGTCACCGGATACCAAGT': ['GGTCACCGGATACCAAGTC'], 'AAACCCGGAGGTCATTGCA': ['AACCCGGAGGTCATTGCAA'], 'GGTCACCGGATACCAAGTC': ['GTCACCGGATACCAAGTCA'], 'ATCGTAATAACGTATGATT': ['TCGTAATAACGTATGATTT'], 'CTAGGTCGGAATTAGGTCG': ['TAGGTCGGAATTAGGTCGA'], 'GAGCCCAGTCAGCGTACTT': ['AGCCCAGTCAGCGTACTTT'], 'GTCATGCGCGTACGCTTAT': ['TCATGCGCGTACGCTTATC'], 'TAGAGTTGCTGCAGGCCAA': ['AGAGTTGCTGCAGGCCAAA'], 'AGCCCAGTCAGCGTACTTT': ['GCCCAGTCAGCGTACTTTT'], 'CTAAGACGTAGCCTCGATT': ['TAAGACGTAGCCTCGATTC'], 'GCGCGTACGCTTATCGGCA': ['CGCGTACGCTTATCGGCAA'], 'CAGGAACGCTGCTATCAAC': ['AGGAACGCTGCTATCAACT'], 'TTTGCGAGCCCAGTCAGCG': ['TTGCGAGCCCAGTCAGCGT'], 'GCAATAAGGGGGAGTTAGC': ['CAATAAGGGGGAGTTAGCT'], 'AGTCATGCGCGTACGCTTA': ['GTCATGCGCGTACGCTTAT'], 'GGGGCCCTGTTATTGTCCA': ['GGGCCCTGTTATTGTCCAG'], 'ATAAGGGGGAGTTAGCTTG': ['TAAGGGGGAGTTAGCTTGG'], 'AGTCAGCGTACTTTTGAAC': ['GTCAGCGTACTTTTGAACA'], 'CCAAAAACCCGGAGGTCAT': ['CAAAAACCCGGAGGTCATT'], 'AAGGGGGAGTTAGCTTGGT': ['AGGGGGAGTTAGCTTGGTG'], 'AATGCCAGGCTTATCGGCA': ['ATGCCAGGCTTATCGGCAA'], 'TTGGTGGCATCGTAATAAC': ['TGGTGGCATCGTAATAACG'], 'TCGGGGATTCAACCCTAGG': ['CGGGGATTCAACCCTAGGT'], 'TTCAGGTCACCGGATACCA': ['TCAGGTCACCGGATACCAA'], 'TGATTTGCGAGCCCAGTCA': ['GATTTGCGAGCCCAGTCAG'], 'GCGCTTCGCATATTGTTCG': ['CGCTTCGCATATTGTTCGT'], 'AGATAGAGTTGCTGCAGGC': ['GATAGAGTTGCTGCAGGCC'], 'AAATGGGGTGGTCTGCAAG': ['AATGGGGTGGTCTGCAAGG'], 'GCAGGCCAAATGGGGTGGT': ['CAGGCCAAATGGGGTGGTC'], 'TACGCTTATCGGCAATAAG': ['ACGCTTATCGGCAATAAGG'], 'TTCGCATATTGTTCGTCAG': ['TCGCATATTGTTCGTCAGT'], 'ATGGGGTGGTCTGCAAGGG': ['TGGGGTGGTCTGCAAGGGG'], 'AGTTGCTGCAGGCCAAATG': ['GTTGCTGCAGGCCAAATGG'], 'CCAAGTCATGCGCGTACGC': ['CAAGTCATGCGCGTACGCT'], 'GAATGCCAGGCTTATCGGC': ['AATGCCAGGCTTATCGGCA'], 'CGTACTTTTGAACACCTAA': ['GTACTTTTGAACACCTAAT'], 'TGTCCAGGAACGCTGCTAT': ['GTCCAGGAACGCTGCTATC'], 'CAGGCTTATCGGCAATAAG': ['AGGCTTATCGGCAATAAGG'], 'GGCCAAATGGGGTGGTCTG': ['GCCAAATGGGGTGGTCTGC'], 'GAAAGGTTCCAAAAACCCG': ['AAAGGTTCCAAAAACCCGG'], 'CGGATACCAAGTCATGCGC': ['GGATACCAAGTCATGCGCG'], 'TTAGCTTGGTGGCATCGTA': ['TAGCTTGGTGGCATCGTAA'], 'GCTATCAACTAAGCGCTTC': ['CTATCAACTAAGCGCTTCG'], 'TAGCTTGGTGGCATCGTAA': ['AGCTTGGTGGCATCGTAAT'], 'GCCAAATGGGGTGGTCTGC': ['CCAAATGGGGTGGTCTGCA'], 'TTTGAACACCTAATACATA': ['TTGAACACCTAATACATAC'], 'TATCGGCAATAAGGGGGAG': ['ATCGGCAATAAGGGGGAGT'], 'ACATACGCGGATAGTCTGC': ['CATACGCGGATAGTCTGCC'], 'AAGCGCTTCGCATATTGTT': ['AGCGCTTCGCATATTGTTC'], 'ACTTTTGAACACCTAATAC': ['CTTTTGAACACCTAATACA'], 'GCATATTGTTCGTCAGTCG': ['CATATTGTTCGTCAGTCGG'], 'CAGTCAGCGTACTTTTGAA': ['AGTCAGCGTACTTTTGAAC'], 'TGCAACAGAATGCCAGGCT': ['GCAACAGAATGCCAGGCTT'], 'GCATCGTAATAACGTATGA': ['CATCGTAATAACGTATGAT'], 'CTGCAAGGGGCCCTGTTAT': ['TGCAAGGGGCCCTGTTATT'], 'GATTTACCAGAAAGGTTCC': ['ATTTACCAGAAAGGTTCCA'], 'AACCCGGAGGTCATTGCAA': ['ACCCGGAGGTCATTGCAAC'], 'AGGCCAAATGGGGTGGTCT': ['GGCCAAATGGGGTGGTCTG'], 'CCTAGGTCGGAATTAGGTC': ['CTAGGTCGGAATTAGGTCG'], 'CCCAGTCAGCGTACTTTTG': ['CCAGTCAGCGTACTTTTGA'], 'TCAGGTCACCGGATACCAA': ['CAGGTCACCGGATACCAAG'], 'CTAATACATACGCGGATAG': ['TAATACATACGCGGATAGT'], 'TAAGACGTAGCCTCGATTC': ['AAGACGTAGCCTCGATTCA'], 'TAAGGGGGAGTTAGCTTGG': ['AAGGGGGAGTTAGCTTGGT'], 'CATGGCATAGATAGAGTTG': ['ATGGCATAGATAGAGTTGC'], 'GTTGCTGCAGGCCAAATGG': ['TTGCTGCAGGCCAAATGGG'], 'ATACCAAGTCATGCGCGTA': ['TACCAAGTCATGCGCGTAC'], 'GATACCAAGTCATGCGCGT': ['ATACCAAGTCATGCGCGTA'], 'GCCAGGCTTATCGGCAATA': ['CCAGGCTTATCGGCAATAA'], 'GTTTGTTCGGGGATTCAAC': ['TTTGTTCGGGGATTCAACC'], 'AGGTCGGAATTAGGTCGAT': ['GGTCGGAATTAGGTCGATT'], 'CAATAAGGGGGAGTTAGCT': ['AATAAGGGGGAGTTAGCTT'], 'ACGCTGCTATCAACTAAGC': ['CGCTGCTATCAACTAAGCG'], 'TCGTAATAACGTATGATTT': ['CGTAATAACGTATGATTTG'], 'ATTGCAACAGAATGCCAGG': ['TTGCAACAGAATGCCAGGC'], 'TCCAGGAACGCTGCTATCA': ['CCAGGAACGCTGCTATCAA'], 'GTCTGCAAGGGGCCCTGTT': ['TCTGCAAGGGGCCCTGTTA'], 'ATTGTCCAGGAACGCTGCT': ['TTGTCCAGGAACGCTGCTA'], 'TTCAACCCTAGGTCGGAAT': ['TCAACCCTAGGTCGGAATT'], 'GTCTAAGACGTAGCCTCGA': ['TCTAAGACGTAGCCTCGAT'], 'CTAATACATACGCGGATTG': ['TAATACATACGCGGATTGT'], 'ATCGGCAATAAGGGGGAGT': ['TCGGCAATAAGGGGGAGTT'], 'CGGAATTAGGTCGATTTAC': ['GGAATTAGGTCGATTTACC'], 'ACGCGGATAGTCTGCCGTT': ['CGCGGATAGTCTGCCGTTT'], 'CCAGTCAGCGTACTTTTGA': ['CAGTCAGCGTACTTTTGAA'], 'TCGTCAGTCGGCGCCAGGT': ['CGTCAGTCGGCGCCAGGTC'], 'CACCTAATACATACGCGGA': ['ACCTAATACATACGCGGAT'], 'CGGATTGTGCTGCGTTCCA': ['GGATTGTGCTGCGTTCCAA'], 'TAATAACGTATGATTTGCG': ['AATAACGTATGATTTGCGA'], 'CCAGGCTTATCGGCAATAA': ['CAGGCTTATCGGCAATAAG'], 'AGAATGCCAGGCTTATCGG': ['GAATGCCAGGCTTATCGGC'], 'GTTCCAAAAACCCGGAGGT': ['TTCCAAAAACCCGGAGGTC'], 'CTTATCGGCAATAAGGGGG': ['TTATCGGCAATAAGGGGGA'], 'GGAACGCTGCTATCAACTA': ['GAACGCTGCTATCAACTAA'], 'GGCCCTGTTATTGTCCAGG': ['GCCCTGTTATTGTCCAGGA'], 'CCGTTTCAGGTCACCGGAT': ['CGTTTCAGGTCACCGGATA'], 'CTGCTATCAACTAAGCGCT': ['TGCTATCAACTAAGCGCTT'], 'TCAGTCGGCGCCAGGTCTA': ['CAGTCGGCGCCAGGTCTAA'], 'TTTACCAGAAAGGTTCCAA': ['TTACCAGAAAGGTTCCAAA'], 'ACCAAGTCATGCGCGTACG': ['CCAAGTCATGCGCGTACGC'], 'AGGTCATTGCAACAGAATG': ['GGTCATTGCAACAGAATGC'], 'TACCAGAAAGGTTCCAAAA': ['ACCAGAAAGGTTCCAAAAA'], 'GTTATTGTCCAGGAACGCT': ['TTATTGTCCAGGAACGCTG'], 'CAAATGGGGTGGTCTGCAA': ['AAATGGGGTGGTCTGCAAG'], 'TTGCTGCAGGCCAAATGGG': ['TGCTGCAGGCCAAATGGGG'], 'AGAAAGGTTCCAAAAACCC': ['GAAAGGTTCCAAAAACCCG'], 'AGGTTCCAAAAACCCGGAG': ['GGTTCCAAAAACCCGGAGG'], 'CATAGATAGAGTTGCTGCA': ['ATAGATAGAGTTGCTGCAG'], 'ACAGAATGCCAGGCTTATC': ['CAGAATGCCAGGCTTATCG'], 'AAGGTTCCAAAAACCCGGA': ['AGGTTCCAAAAACCCGGAG'], 'TTATCGGCAATAAGGGGGA': ['TATCGGCAATAAGGGGGAG'], 'ACCTAATACATACGCGGAT': ['CCTAATACATACGCGGATA', 'CCTAATACATACGCGGATT'], 'TTCCAAAAACCCGGAGGTC': ['TCCAAAAACCCGGAGGTCA'], 'ACGTATGATTTGCGAGCCC': ['CGTATGATTTGCGAGCCCA'], 'GCTTCGCATATTGTTCGTC': ['CTTCGCATATTGTTCGTCA'], 'ATACATACGCGGATTGTGC': ['TACATACGCGGATTGTGCT'], 'AGTTAGCTTGGTGGCATCG': ['GTTAGCTTGGTGGCATCGT'], 'AAAACCCGGAGGTCATTGC': ['AAACCCGGAGGTCATTGCA'], 'TAATACATACGCGGATAGT': ['AATACATACGCGGATAGTC'], 'GAGGTCATTGCAACAGAAT': ['AGGTCATTGCAACAGAATG'], 'TACATACGCGGATTGTGCT': ['ACATACGCGGATTGTGCTG'], 'CAAGGGGCCCTGTTATTGT': ['AAGGGGCCCTGTTATTGTC'], 'ACGCTTATCGGCAATAAGG': ['CGCTTATCGGCAATAAGGG'], 'CGGCAATAAGGGGGAGTTA': ['GGCAATAAGGGGGAGTTAG'], 'CGGATAGTCTGCCGTTTCA': ['GGATAGTCTGCCGTTTCAG'], 'CATCGTAATAACGTATGAT': ['ATCGTAATAACGTATGATT'], 'CGTATGATTTGCGAGCCCA': ['GTATGATTTGCGAGCCCAG'], 'GGGGTGGTCTGCAAGGGGC': ['GGGTGGTCTGCAAGGGGCC'], 'CCGAATCATGGCATAGATA': ['CGAATCATGGCATAGATAG'], 'CAGTCGGCGCCAGGTCTAA': ['AGTCGGCGCCAGGTCTAAG'], 'ATTGTTCGTCAGTCGGCGC': ['TTGTTCGTCAGTCGGCGCC'], 'ATACGCGGATTGTGCTGCG': ['TACGCGGATTGTGCTGCGT'], 'TGCCAGGCTTATCGGCAAT': ['GCCAGGCTTATCGGCAATA'], 'AGGAACGCTGCTATCAACT': ['GGAACGCTGCTATCAACTA'], 'TCCAAAAACCCGGAGGTCA': ['CCAAAAACCCGGAGGTCAT'], 'CGCTTATCGGCAATAAGGG': ['GCTTATCGGCAATAAGGGG'], 'ATATTGTTCGTCAGTCGGC': ['TATTGTTCGTCAGTCGGCG'], 'TAACGTATGATTTGCGAGC': ['AACGTATGATTTGCGAGCC'], 'CGTCAGTCGGCGCCAGGTC': ['GTCAGTCGGCGCCAGGTCT'], 'CAAGTCATGCGCGTACGCT': ['AAGTCATGCGCGTACGCTT'], 'GCCCTGTTATTGTCCAGGA': ['CCCTGTTATTGTCCAGGAA'], 'GATAGAGTTGCTGCAGGCC': ['ATAGAGTTGCTGCAGGCCA'], 'TTTCAGGTCACCGGATACC': ['TTCAGGTCACCGGATACCA'], 'CTATCAACTAAGCGCTTCG': ['TATCAACTAAGCGCTTCGC'], 'TACGCGGATAGTCTGCCGT': ['ACGCGGATAGTCTGCCGTT'], 'CCAAATGGGGTGGTCTGCA': ['CAAATGGGGTGGTCTGCAA'], 'TCGGAATTAGGTCGATTTA': ['CGGAATTAGGTCGATTTAC'], 'GGCAATAAGGGGGAGTTAG': ['GCAATAAGGGGGAGTTAGC'], 'TTACCAGAAAGGTTCCAAA': ['TACCAGAAAGGTTCCAAAA'], 'CTGCCGTTTCAGGTCACCG': ['TGCCGTTTCAGGTCACCGG'], 'AGGTCTAAGACGTAGCCTC': ['GGTCTAAGACGTAGCCTCG'], 'TATTGTTCGTCAGTCGGCG': ['ATTGTTCGTCAGTCGGCGC'], 'TCGGCGCCAGGTCTAAGAC': ['CGGCGCCAGGTCTAAGACG'], 'TTCAGGTTTGTTCGGGGAT': ['TCAGGTTTGTTCGGGGATT'], 'AGTCTGCCGTTTCAGGTCA': ['GTCTGCCGTTTCAGGTCAC'], 'GCGGATAGTCTGCCGTTTC': ['CGGATAGTCTGCCGTTTCA'], 'AAGGGGCCCTGTTATTGTC': ['AGGGGCCCTGTTATTGTCC'], 'AAGACGTAGCCTCGATTCA': ['AGACGTAGCCTCGATTCAG'], 'TGCAAGGGGCCCTGTTATT': ['GCAAGGGGCCCTGTTATTG'], 'TCAACTAAGCGCTTCGCAT': ['CAACTAAGCGCTTCGCATA'], 'CGCGTACGCTTATCGGCAA': ['GCGTACGCTTATCGGCAAT'], 'CGCGGATTGTGCTGCGTTC': ['GCGGATTGTGCTGCGTTCC'], 'ACCCGGAGGTCATTGCAAC': ['CCCGGAGGTCATTGCAACA'], 'TGGTCTGCAAGGGGCCCTG': ['GGTCTGCAAGGGGCCCTGT'], 'CCTGTTATTGTCCAGGAAC': ['CTGTTATTGTCCAGGAACG'], 'GATAGTCTGCCGTTTCAGG': ['ATAGTCTGCCGTTTCAGGT'], 'TGTTCGGGGATTCAACCCT': ['GTTCGGGGATTCAACCCTA'], 'GTACGCTTATCGGCAATAA': ['TACGCTTATCGGCAATAAG'], 'TATTGTCCAGGAACGCTGC': ['ATTGTCCAGGAACGCTGCT'], 'AAAAACCCGGAGGTCATTG': ['AAAACCCGGAGGTCATTGC'], 'TCAGCGTACTTTTGAACAC': ['CAGCGTACTTTTGAACACC'], 'CATACGCGGATTGTGCTGC': ['ATACGCGGATTGTGCTGCG'], 'CCTCGATTCAGGTTTGTTC': ['CTCGATTCAGGTTTGTTCG'], 'ACGCGGATTGTGCTGCGTT': ['CGCGGATTGTGCTGCGTTC'], 'CAGGCCAAATGGGGTGGTC': ['AGGCCAAATGGGGTGGTCT'], 'GTCGGCGCCAGGTCTAAGA': ['TCGGCGCCAGGTCTAAGAC'], 'TACGCGGATTGTGCTGCGT': ['ACGCGGATTGTGCTGCGTT'], 'GGCGCCAGGTCTAAGACGT': ['GCGCCAGGTCTAAGACGTA'], 'GAGTTGCTGCAGGCCAAAT': ['AGTTGCTGCAGGCCAAATG'], 'AATACATACGCGGATAGTC': ['ATACATACGCGGATAGTCT'], 'AATACATACGCGGATTGTG': ['ATACATACGCGGATTGTGC'], 'CGGGGATTCAACCCTAGGT': ['GGGGATTCAACCCTAGGTC'], 'GATTCAACCCTAGGTCGGA': ['ATTCAACCCTAGGTCGGAA'], 'AACAGAATGCCAGGCTTAT': ['ACAGAATGCCAGGCTTATC'], 'GCGTACTTTTGAACACCTA': ['CGTACTTTTGAACACCTAA'], 'GTTCGTCAGTCGGCGCCAG': ['TTCGTCAGTCGGCGCCAGG'], 'CTTCGCATATTGTTCGTCA': ['TTCGCATATTGTTCGTCAG'], 'AACACCTAATACATACGCG': ['ACACCTAATACATACGCGG'], 'ACCCTAGGTCGGAATTAGG': ['CCCTAGGTCGGAATTAGGT'], 'CTTGGTGGCATCGTAATAA': ['TTGGTGGCATCGTAATAAC'], 'AATAACGTATGATTTGCGA': ['ATAACGTATGATTTGCGAG'], 'GATTTGCGAGCCCAGTCAG': ['ATTTGCGAGCCCAGTCAGC'], 'GATTCAGGTTTGTTCGGGG': ['ATTCAGGTTTGTTCGGGGA'], 'TTGTTCGTCAGTCGGCGCC': ['TGTTCGTCAGTCGGCGCCA'], 'ATAGTCTGCCGTTTCAGGT': ['TAGTCTGCCGTTTCAGGTC'], 'TGAACACCTAATACATACG': ['GAACACCTAATACATACGC'], 'TTATTGTCCAGGAACGCTG': ['TATTGTCCAGGAACGCTGC'], 'TGGGGTGGTCTGCAAGGGG': ['GGGGTGGTCTGCAAGGGGC'], 'CCCTGTTATTGTCCAGGAA': ['CCTGTTATTGTCCAGGAAC'], 'CGTAATAACGTATGATTTG': ['GTAATAACGTATGATTTGC'], 'GGTGGTCTGCAAGGGGCCC': ['GTGGTCTGCAAGGGGCCCT'], 'GGTTCCAAAAACCCGGAGG': ['GTTCCAAAAACCCGGAGGT'], 'GGGTGGTCTGCAAGGGGCC': ['GGTGGTCTGCAAGGGGCCC'], 'GGTCTAAGACGTAGCCTCG': ['GTCTAAGACGTAGCCTCGA'], 'GTCAGTCGGCGCCAGGTCT': ['TCAGTCGGCGCCAGGTCTA'], 'ACATACGCGGATTGTGCTG': ['CATACGCGGATTGTGCTGC'], 'AGAGTTGCTGCAGGCCAAA': ['GAGTTGCTGCAGGCCAAAT'], 'TCAACCCTAGGTCGGAATT': ['CAACCCTAGGTCGGAATTA'], 'CGCTGCTATCAACTAAGCG': ['GCTGCTATCAACTAAGCGC'], 'CCTAATACATACGCGGATT': ['CTAATACATACGCGGATTG'], 'AGGCTTATCGGCAATAAGG': ['GGCTTATCGGCAATAAGGG'], 'GGATACCAAGTCATGCGCG': ['GATACCAAGTCATGCGCGT'], 'GCTGCTATCAACTAAGCGC': ['CTGCTATCAACTAAGCGCT'], 'GGCATAGATAGAGTTGCTG': ['GCATAGATAGAGTTGCTGC'], 'GCCTCGATTCAGGTTTGTT': ['CCTCGATTCAGGTTTGTTC'], 'ACTAAGCGCTTCGCATATT': ['CTAAGCGCTTCGCATATTG'], 'CAACAGAATGCCAGGCTTA': ['AACAGAATGCCAGGCTTAT'], 'CGCCAGGTCTAAGACGTAG': ['GCCAGGTCTAAGACGTAGC'], 'TGGCATCGTAATAACGTAT': ['GGCATCGTAATAACGTATG'], 'GTCCAGGAACGCTGCTATC': ['TCCAGGAACGCTGCTATCA'], 'GGGATTCAACCCTAGGTCG': ['GGATTCAACCCTAGGTCGG'], 'GGATTCAACCCTAGGTCGG': ['GATTCAACCCTAGGTCGGA'], 'ATTTACCAGAAAGGTTCCA': ['TTTACCAGAAAGGTTCCAA'], 'GTCAGCGTACTTTTGAACA': ['TCAGCGTACTTTTGAACAC'], 'TCTAAGACGTAGCCTCGAT': ['CTAAGACGTAGCCTCGATT'], 'GCTTGGTGGCATCGTAATA': ['CTTGGTGGCATCGTAATAA'], 'GGAGGTCATTGCAACAGAA': ['GAGGTCATTGCAACAGAAT'], 'AGCGCTTCGCATATTGTTC': ['GCGCTTCGCATATTGTTCG'], 'TCATGGCATAGATAGAGTT': ['CATGGCATAGATAGAGTTG'], 'ATCAACTAAGCGCTTCGCA': ['TCAACTAAGCGCTTCGCAT'], 'GTCGATTTACCAGAAAGGT': ['TCGATTTACCAGAAAGGTT'], 'AGGTCGATTTACCAGAAAG': ['GGTCGATTTACCAGAAAGG'], 'CAGGTCTAAGACGTAGCCT': ['AGGTCTAAGACGTAGCCTC'], 'AGCCTCGATTCAGGTTTGT': ['GCCTCGATTCAGGTTTGTT'], 'TCGGCAATAAGGGGGAGTT': ['CGGCAATAAGGGGGAGTTA'], 'CAACTAAGCGCTTCGCATA': ['AACTAAGCGCTTCGCATAT'], 'GCATAGATAGAGTTGCTGC': ['CATAGATAGAGTTGCTGCA'], 'CGATTCAGGTTTGTTCGGG': ['GATTCAGGTTTGTTCGGGG'], 'TTGCAACAGAATGCCAGGC': ['TGCAACAGAATGCCAGGCT'], 'CGTACGCTTATCGGCAATA': ['GTACGCTTATCGGCAATAA'], 'CAGAAAGGTTCCAAAAACC': ['AGAAAGGTTCCAAAAACCC'], 'AATGGGGTGGTCTGCAAGG': ['ATGGGGTGGTCTGCAAGGG'], 'GTAGCCTCGATTCAGGTTT': ['TAGCCTCGATTCAGGTTTG'], 'GGAATTAGGTCGATTTACC': ['GAATTAGGTCGATTTACCA'], 'GCAAGGGGCCCTGTTATTG': ['CAAGGGGCCCTGTTATTGT'], 'TTGTCCAGGAACGCTGCTA': ['TGTCCAGGAACGCTGCTAT'], 'TACATACGCGGATAGTCTG': ['ACATACGCGGATAGTCTGC'], 'TTTTGAACACCTAATACAT': ['TTTGAACACCTAATACATA'], 'CATACGCGGATAGTCTGCC': ['ATACGCGGATAGTCTGCCG'], 'GGCTTATCGGCAATAAGGG': ['GCTTATCGGCAATAAGGGG'], 'ATTCAACCCTAGGTCGGAA': ['TTCAACCCTAGGTCGGAAT'], 'AAGTCATGCGCGTACGCTT': ['AGTCATGCGCGTACGCTTA'], 'AACTAAGCGCTTCGCATAT': ['ACTAAGCGCTTCGCATATT'], 'CAACCCTAGGTCGGAATTA': ['AACCCTAGGTCGGAATTAG'], 'CTCGATTCAGGTTTGTTCG': ['TCGATTCAGGTTTGTTCGG'], 'ACCGAATCATGGCATAGAT': ['CCGAATCATGGCATAGATA'], 'TGCAGGCCAAATGGGGTGG': ['GCAGGCCAAATGGGGTGGT'], 'GCTGCAGGCCAAATGGGGT': ['CTGCAGGCCAAATGGGGTG'], 'AGGTTTGTTCGGGGATTCA': ['GGTTTGTTCGGGGATTCAA'], 'GGTGGCATCGTAATAACGT': ['GTGGCATCGTAATAACGTA'], 'GTTTCAGGTCACCGGATAC': ['TTTCAGGTCACCGGATACC'], 'TAGTCTGCCGTTTCAGGTC': ['AGTCTGCCGTTTCAGGTCA'], 'CCAGGAACGCTGCTATCAA': ['CAGGAACGCTGCTATCAAC'], 'ACCGGATACCAAGTCATGC': ['CCGGATACCAAGTCATGCG'], 'TCGATTCAGGTTTGTTCGG': ['CGATTCAGGTTTGTTCGGG'], 'AGGGGCCCTGTTATTGTCC': ['GGGGCCCTGTTATTGTCCA'], 'ATGGCATAGATAGAGTTGC': ['TGGCATAGATAGAGTTGCT'], 'CACCGGATACCAAGTCATG': ['ACCGGATACCAAGTCATGC'], 'CCCTAGGTCGGAATTAGGT': ['CCTAGGTCGGAATTAGGTC'], 'ACCAGAAAGGTTCCAAAAA': ['CCAGAAAGGTTCCAAAAAC'], 'TGTTCGTCAGTCGGCGCCA': ['GTTCGTCAGTCGGCGCCAG'], 'TATCAACTAAGCGCTTCGC': ['ATCAACTAAGCGCTTCGCA'], 'GGTTTGTTCGGGGATTCAA': ['GTTTGTTCGGGGATTCAAC'], 'ATACGCGGATAGTCTGCCG': ['TACGCGGATAGTCTGCCGT'], 'CATTGCAACAGAATGCCAG': ['ATTGCAACAGAATGCCAGG'], 'ATAGAGTTGCTGCAGGCCA': ['TAGAGTTGCTGCAGGCCAA'], 'TGGCATAGATAGAGTTGCT': ['GGCATAGATAGAGTTGCTG'], 'AACCCTAGGTCGGAATTAG': ['ACCCTAGGTCGGAATTAGG'], 'CTGCAGGCCAAATGGGGTG': ['TGCAGGCCAAATGGGGTGG'], 'CCGGAGGTCATTGCAACAG': ['CGGAGGTCATTGCAACAGA'], 'GCGCCAGGTCTAAGACGTA': ['CGCCAGGTCTAAGACGTAG'], 'TGCGCGTACGCTTATCGGC': ['GCGCGTACGCTTATCGGCA'], 'CGCATATTGTTCGTCAGTC': ['GCATATTGTTCGTCAGTCG'], 'CATATTGTTCGTCAGTCGG': ['ATATTGTTCGTCAGTCGGC'], 'ACGTAGCCTCGATTCAGGT': ['CGTAGCCTCGATTCAGGTT'], 'TTTGTTCGGGGATTCAACC': ['TTGTTCGGGGATTCAACCC'], 'TCATTGCAACAGAATGCCA': ['CATTGCAACAGAATGCCAG']})\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def ep(db_graph):\n",
        "    from collections import defaultdict\n",
        "    in_degree = defaultdict(int)\n",
        "    out_degree = defaultdict(int)\n",
        "\n",
        "    for node in db_graph:\n",
        "        out_degree[node] += len(db_graph[node])\n",
        "        for neighbor in db_graph[node]:\n",
        "            in_degree[neighbor] += 1\n",
        "\n",
        "    start_nodes = None\n",
        "    end_nodes = None\n",
        "\n",
        "    for node in set(in_degree.keys()).union(set(out_degree.keys())):\n",
        "        out_diff = out_degree[node] - in_degree[node]\n",
        "        if out_diff == 1:\n",
        "            start_nodes = node\n",
        "        if out_diff == -1:\n",
        "            end_nodes = node\n",
        "\n",
        "    if start_nodes is None:\n",
        "        start_nodes = next(iter(db_graph))\n",
        "\n",
        "    path = []\n",
        "    stack = [start_nodes]\n",
        "\n",
        "    while stack:\n",
        "        current_node = stack[-1]\n",
        "        if db_graph[current_node]:\n",
        "            next_node = db_graph[current_node].pop(0)\n",
        "            stack.append(next_node)\n",
        "        else:\n",
        "            path.append(stack.pop())\n",
        "\n",
        "\n",
        "    return path[::-1]\n",
        "\n",
        "'''\n",
        "\n",
        "def euler_path(graph):\n",
        "    # Initialize variables\n",
        "    path = []\n",
        "    stack = []\n",
        "    current_vertex = next(iter(graph))\n",
        "\n",
        "    # Main algorithm\n",
        "    while True:\n",
        "        if graph[current_vertex]:\n",
        "            stack.append(current_vertex)\n",
        "            next_vertex = graph[current_vertex].pop(0)\n",
        "            current_vertex = next_vertex\n",
        "        else:\n",
        "            path.append(current_vertex)\n",
        "            if stack:\n",
        "                current_vertex = stack.pop()\n",
        "            else:\n",
        "                break\n",
        "\n",
        "    # Return the Eulerian path\n",
        "    return path[::-1]\n",
        "\n",
        "# Test the function\n",
        "eulerian_path = euler_path(db_graph)\n",
        "print(\"Eulerian Path:\", eulerian_path)\n",
        "\n",
        "\n",
        "'''\n",
        "from collections import defaultdict\n",
        "\n",
        "def calculate_degree(db_graph):\n",
        "    in_degree = defaultdict(int)\n",
        "    out_degree = defaultdict(int)\n",
        "\n",
        "    for node in db_graph:\n",
        "        out_degree[node] += len(db_graph[node])\n",
        "        for neighbor in db_graph[node]:\n",
        "            in_degree[neighbor] += 1\n",
        "\n",
        "    return in_degree, out_degree\n",
        "\n",
        "def eulerian_path(db_graph):\n",
        "    in_degree, out_degree = calculate_degree(db_graph)\n",
        "    start_nodes, end_nodes = None, None\n",
        "\n",
        "    for node in set(in_degree.keys()).union(set(out_degree.keys())):\n",
        "        out_diff = out_degree[node] - in_degree[node]\n",
        "        if out_diff == 1:\n",
        "            start_nodes = node\n",
        "        if out_diff == -1:\n",
        "            end_nodes = node\n",
        "\n",
        "    if start_nodes is None:\n",
        "        start_nodes = next(iter(db_graph))\n",
        "\n",
        "    path = []\n",
        "    stack = [start_nodes]\n",
        "\n",
        "    while stack:\n",
        "        current_node = stack[-1]\n",
        "        if db_graph[current_node]:\n",
        "            next_node = db_graph[current_node].pop(0)\n",
        "            stack.append(next_node)\n",
        "        else:\n",
        "            path.append(stack.pop())\n",
        "\n",
        "    return path[::-1]\n",
        "\n",
        "\n",
        "from collections import Counter, deque\n",
        "def find_start_node(de_bruijn_graph):\n",
        "    out_degree = Counter()\n",
        "    in_degree = Counter()\n",
        "\n",
        "    for node in de_bruijn_graph:\n",
        "        out_degree[node] += len(de_bruijn_graph[node])\n",
        "        for adj in de_bruijn_graph[node]:\n",
        "            in_degree[adj] += 1\n",
        "\n",
        "    start_node = None\n",
        "    for node in de_bruijn_graph:\n",
        "        if out_degree[node] - in_degree[node] == 1:\n",
        "            start_node = node\n",
        "            break\n",
        "        if out_degree[node] > 0 and start_node is None:\n",
        "            start_node = node\n",
        "\n",
        "    return start_node\n",
        "def find_eulerian_path(de_bruijn_graph):\n",
        "    # Hierholzer’s Algorithm to find Eulerian path\n",
        "    start_node = find_start_node(de_bruijn_graph)\n",
        "    stack = [start_node]\n",
        "    path = []\n",
        "    current_path = deque()\n",
        "\n",
        "    while stack:\n",
        "        u = stack[-1]\n",
        "        if de_bruijn_graph[u]:\n",
        "            v = de_bruijn_graph[u].pop()\n",
        "            stack.append(v)\n",
        "        else:\n",
        "            current_path.appendleft(u)\n",
        "            stack.pop()\n",
        "\n",
        "    return list(current_path)\n",
        "\n",
        "UP = find_eulerian_path(db_graph)\n",
        "print(\"Eulerian Path:\", len(UP))\n",
        "'''\n",
        "eulerian_path =  ep(db_graph)\n",
        "print(eulerian_path)\n",
        "print(''.join(eulerian_path))\n",
        "\n",
        "'''"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 70
        },
        "id": "7piE8gxhB1Nl",
        "outputId": "f7531bd9-4654-4cac-a8e5-e64dcffa1a53"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Eulerian Path: 400\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "\"\\neulerian_path =  ep(db_graph)\\nprint(eulerian_path)\\nprint(''.join(eulerian_path))\\n\\n\""
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "'''\n",
        "def reconstruct_sequence(eulerian_path):\n",
        "    reconstructed_seq = eulerian_path[0]\n",
        "\n",
        "    for i in range(1, len(eulerian_path)):\n",
        "        seq = eulerian_path[i]\n",
        "        overlap = find_overlap(reconstructed_seq, seq)\n",
        "        if overlap > 0:\n",
        "            reconstructed_seq += seq[overlap:]\n",
        "        else:\n",
        "            reconstructed_seq += seq\n",
        "\n",
        "    return reconstructed_seq\n",
        "\n",
        "def find_overlap(seq1, seq2):\n",
        "    max_overlap = min(len(seq1), len(seq2))\n",
        "    for i in range(max_overlap, 0, -1):\n",
        "        if seq1.endswith(seq2[:i]):\n",
        "            return i\n",
        "    return 0\n",
        "'''\n",
        "\n",
        "def full_string(UP):\n",
        "    genome = UP[0]\n",
        "    for node in UP[1:]:\n",
        "        genome += node[-1]\n",
        "    return genome\n",
        "\n",
        "final_seq = full_string(UP)\n",
        "print(final_seq)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oqO-vcFCM5XM",
        "outputId": "69368cbf-3307-4ba3-b6f1-963510c6b519"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CACCGAATCATGGCATAGATAGAGTTGCTGCAGGCCAAATGGGGTGGTCTGCAAGGGGCCCTGTTATTGTCCAGGAACGCTGCTATCAACTAAGCGCTTCGCATATTGTTCGTCAGTCGGCGCCAGGTCTAAGACGTAGCCTCGATTCAGGTTTGTTCGGGGATTCAACCCTAGGTCGGAATTAGGTCGATTTACCAGAAAGGTTCCAAAAACCCGGAGGTCATTGCAACAGAATGCCAGGCTTATCGGCAATAAGGGGGAGTTAGCTTGGTGGCATCGTAATAACGTATGATTTGCGAGCCCAGTCAGCGTACTTTTGAACACCTAATACATACGCGGATAGTCTGCCGTTTCAGGTCACCGGATACCAAGTCATGCGCGTACGCTTATCGGCAATAAGGGGTGTGCTGCGTTCCAA\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# checks\n",
        "'''\n",
        "def check_sequence_lengths(eulerian_path):\n",
        "    for i, seq in enumerate(eulerian_path):\n",
        "        print(f\"Sequence {i + 1} length: {len(seq)}\")\n",
        "\n",
        "\n",
        "def check_last_characters(eulerian_path):\n",
        "    for i, seq in enumerate(eulerian_path):\n",
        "        print(f\"Last character of Sequence {i + 1}: {seq[-1]}\")\n",
        "x = check_sequence_lengths(eulerian_path)\n",
        "print(x)\n",
        "\n",
        "y = check_last_characters(eulerian_path)\n",
        "print(y)\n",
        "'''"
      ],
      "metadata": {
        "id": "9W--o8EvYoLP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "with open('eulerian_path.txt', 'w') as file:\n",
        "    for i in eulerian_path:\n",
        "        file.write(i + '\\n')"
      ],
      "metadata": {
        "id": "8JubhptzF_eT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "reconstructed_genome = ''.join(eulerian_path)\n",
        "with open('reconstructed_genome.txt', 'w') as file:\n",
        "    #for i in reconstructed_genome:\n",
        "    file.write(final_seq + '\\n')"
      ],
      "metadata": {
        "id": "kmmXtKQxGR9S"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#compare outputs of ref and reconstructed\n",
        "ref_genome_sample = read_fasta_list('project2_sample1_reference_genome.fasta')\n",
        "print(' ',final_seq)\n",
        "print(ref_genome_sample)\n"
      ],
      "metadata": {
        "id": "iK6Y4qVVknuL",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a5092145-2240-4ec9-be83-d4f3cf32604a"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  CACCGAATCATGGCATAGATAGAGTTGCTGCAGGCCAAATGGGGTGGTCTGCAAGGGGCCCTGTTATTGTCCAGGAACGCTGCTATCAACTAAGCGCTTCGCATATTGTTCGTCAGTCGGCGCCAGGTCTAAGACGTAGCCTCGATTCAGGTTTGTTCGGGGATTCAACCCTAGGTCGGAATTAGGTCGATTTACCAGAAAGGTTCCAAAAACCCGGAGGTCATTGCAACAGAATGCCAGGCTTATCGGCAATAAGGGGGAGTTAGCTTGGTGGCATCGTAATAACGTATGATTTGCGAGCCCAGTCAGCGTACTTTTGAACACCTAATACATACGCGGATAGTCTGCCGTTTCAGGTCACCGGATACCAAGTCATGCGCGTACGCTTATCGGCAATAAGGGGTGTGCTGCGTTCCAA\n",
            "['CACCGAATCATGGCATAGATAGAGTTGCTGCAGGCCAAATGGGGTGGTCTGCAAGGGGCCCTGTTATTGTCCAGGAACGCTGCTATCAACTAAGCGCTTCGCATATTGTTCGTCAGTCGGCGCCAGGTCTAAGACGTAGCCTCGATTCAGGTTTGTTCGGGGATTCAACCCTAGGTCGGAATTAGGTCGATTTACCAGAAAGGTTCCAAAAACCCGGAGGTCATTGCAACAGAATGCCAGGCTTATCGGCAATAAGGGGGAGTTAGCTTGGTGGCATCGTAATAACGTATGATTTGCGAGCCCAGTCAGCGTACTTTTGAACACCTAATACATACGCGGATAGTCTGCCGTTTCAGGTCACCGGATACCAAGTCATGCGCGTACGCTTATCGGCAATAAGGGGGAGTTAGCTTGGTGGCATCGTAATAACGTATGATTTGCGAGCCCAGTCAGCGTACTTTTGAACACCTAATACATACGCGGATTGTGCTGCGTTCCAA']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def hamming_distance(seq1, seq2):\n",
        "    if len(seq1) != len(seq2):\n",
        "        raise ValueError(\"not equal length\")\n",
        "        #'nope'\n",
        "    distance = 0\n",
        "    for i in range(len(seq1)):\n",
        "        if seq1[i] != seq2[i]:\n",
        "            distance += 1\n",
        "    return distance"
      ],
      "metadata": {
        "id": "Zmzo9NUEa2nA"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def read_mapping_with_substitutions(reads, reference_genome, threshold):\n",
        "    pos_dict = {}\n",
        "    for seq_key, seq_value in reads.items():\n",
        "        read_length = len(seq_value)\n",
        "        for i in range(len(reference_genome) - read_length + 1):\n",
        "            if hamming_distance(seq_value, reference_genome[i:i+read_length]) <= threshold:\n",
        "                if seq_key not in pos_dict:\n",
        "                    pos_dict[seq_key] = []\n",
        "                pos_dict[seq_key].append(i)\n",
        "    return pos_dict\n",
        "\n",
        "reads_order = read_mapping_with_substitutions(spectrum_reads, final_seq, t)\n",
        "print(len(reads_order))\n",
        "# Print items in order\n",
        "for seq, positions in sorted(reads_order.items(), key=lambda x: min(x[1])):\n",
        "    print(\">\"+ seq)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RslsGrhObK1Z",
        "outputId": "fd772c0b-c304-409e-94ff-60a55c2770c4"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "472\n",
            ">read_107\n",
            ">read_433\n",
            ">read_258\n",
            ">read_54\n",
            ">read_79\n",
            ">read_48\n",
            ">read_95\n",
            ">read_399\n",
            ">read_184\n",
            ">read_449\n",
            ">read_464\n",
            ">read_379\n",
            ">read_407\n",
            ">read_231\n",
            ">read_102\n",
            ">read_57\n",
            ">read_141\n",
            ">read_275\n",
            ">read_463\n",
            ">read_122\n",
            ">read_369\n",
            ">read_330\n",
            ">read_148\n",
            ">read_185\n",
            ">read_228\n",
            ">read_114\n",
            ">read_436\n",
            ">read_467\n",
            ">read_434\n",
            ">read_144\n",
            ">read_320\n",
            ">read_177\n",
            ">read_156\n",
            ">read_164\n",
            ">read_280\n",
            ">read_227\n",
            ">read_143\n",
            ">read_413\n",
            ">read_147\n",
            ">read_357\n",
            ">read_257\n",
            ">read_363\n",
            ">read_361\n",
            ">read_93\n",
            ">read_301\n",
            ">read_24\n",
            ">read_198\n",
            ">read_56\n",
            ">read_174\n",
            ">read_295\n",
            ">read_416\n",
            ">read_250\n",
            ">read_293\n",
            ">read_448\n",
            ">read_130\n",
            ">read_101\n",
            ">read_217\n",
            ">read_274\n",
            ">read_359\n",
            ">read_303\n",
            ">read_70\n",
            ">read_32\n",
            ">read_226\n",
            ">read_355\n",
            ">read_310\n",
            ">read_199\n",
            ">read_418\n",
            ">read_154\n",
            ">read_386\n",
            ">read_197\n",
            ">read_443\n",
            ">read_126\n",
            ">read_264\n",
            ">read_216\n",
            ">read_6\n",
            ">read_61\n",
            ">read_193\n",
            ">read_371\n",
            ">read_378\n",
            ">read_219\n",
            ">read_104\n",
            ">read_160\n",
            ">read_278\n",
            ">read_454\n",
            ">read_400\n",
            ">read_296\n",
            ">read_406\n",
            ">read_427\n",
            ">read_381\n",
            ">read_86\n",
            ">read_110\n",
            ">read_168\n",
            ">read_398\n",
            ">read_140\n",
            ">read_46\n",
            ">read_242\n",
            ">read_341\n",
            ">read_146\n",
            ">read_82\n",
            ">read_473\n",
            ">read_170\n",
            ">read_474\n",
            ">read_267\n",
            ">read_287\n",
            ">read_260\n",
            ">read_350\n",
            ">read_453\n",
            ">read_340\n",
            ">read_97\n",
            ">read_208\n",
            ">read_270\n",
            ">read_366\n",
            ">read_220\n",
            ">read_259\n",
            ">read_51\n",
            ">read_321\n",
            ">read_288\n",
            ">read_26\n",
            ">read_329\n",
            ">read_471\n",
            ">read_383\n",
            ">read_36\n",
            ">read_15\n",
            ">read_403\n",
            ">read_285\n",
            ">read_365\n",
            ">read_201\n",
            ">read_395\n",
            ">read_124\n",
            ">read_182\n",
            ">read_294\n",
            ">read_5\n",
            ">read_12\n",
            ">read_478\n",
            ">read_45\n",
            ">read_414\n",
            ">read_84\n",
            ">read_404\n",
            ">read_380\n",
            ">read_317\n",
            ">read_431\n",
            ">read_447\n",
            ">read_408\n",
            ">read_349\n",
            ">read_69\n",
            ">read_289\n",
            ">read_73\n",
            ">read_2\n",
            ">read_437\n",
            ">read_458\n",
            ">read_190\n",
            ">read_479\n",
            ">read_74\n",
            ">read_306\n",
            ">read_33\n",
            ">read_58\n",
            ">read_137\n",
            ">read_335\n",
            ">read_19\n",
            ">read_389\n",
            ">read_392\n",
            ">read_336\n",
            ">read_423\n",
            ">read_200\n",
            ">read_370\n",
            ">read_429\n",
            ">read_465\n",
            ">read_344\n",
            ">read_451\n",
            ">read_178\n",
            ">read_119\n",
            ">read_37\n",
            ">read_191\n",
            ">read_52\n",
            ">read_13\n",
            ">read_281\n",
            ">read_204\n",
            ">read_415\n",
            ">read_23\n",
            ">read_88\n",
            ">read_63\n",
            ">read_35\n",
            ">read_7\n",
            ">read_402\n",
            ">read_21\n",
            ">read_401\n",
            ">read_75\n",
            ">read_29\n",
            ">read_175\n",
            ">read_393\n",
            ">read_221\n",
            ">read_283\n",
            ">read_225\n",
            ">read_452\n",
            ">read_50\n",
            ">read_411\n",
            ">read_229\n",
            ">read_157\n",
            ">read_28\n",
            ">read_233\n",
            ">read_230\n",
            ">read_362\n",
            ">read_214\n",
            ">read_238\n",
            ">read_265\n",
            ">read_133\n",
            ">read_25\n",
            ">read_311\n",
            ">read_246\n",
            ">read_116\n",
            ">read_176\n",
            ">read_300\n",
            ">read_94\n",
            ">read_469\n",
            ">read_96\n",
            ">read_397\n",
            ">read_248\n",
            ">read_223\n",
            ">read_65\n",
            ">read_78\n",
            ">read_480\n",
            ">read_462\n",
            ">read_196\n",
            ">read_409\n",
            ">read_172\n",
            ">read_44\n",
            ">read_382\n",
            ">read_338\n",
            ">read_232\n",
            ">read_4\n",
            ">read_213\n",
            ">read_150\n",
            ">read_135\n",
            ">read_62\n",
            ">read_263\n",
            ">read_189\n",
            ">read_212\n",
            ">read_308\n",
            ">read_145\n",
            ">read_155\n",
            ">read_251\n",
            ">read_376\n",
            ">read_266\n",
            ">read_422\n",
            ">read_55\n",
            ">read_325\n",
            ">read_215\n",
            ">read_372\n",
            ">read_235\n",
            ">read_309\n",
            ">read_166\n",
            ">read_195\n",
            ">read_203\n",
            ">read_254\n",
            ">read_405\n",
            ">read_475\n",
            ">read_252\n",
            ">read_312\n",
            ">read_282\n",
            ">read_425\n",
            ">read_128\n",
            ">read_163\n",
            ">read_192\n",
            ">read_333\n",
            ">read_105\n",
            ">read_342\n",
            ">read_131\n",
            ">read_237\n",
            ">read_183\n",
            ">read_240\n",
            ">read_134\n",
            ">read_241\n",
            ">read_0\n",
            ">read_273\n",
            ">read_9\n",
            ">read_426\n",
            ">read_31\n",
            ">read_364\n",
            ">read_16\n",
            ">read_468\n",
            ">read_38\n",
            ">read_71\n",
            ">read_109\n",
            ">read_351\n",
            ">read_245\n",
            ">read_324\n",
            ">read_111\n",
            ">read_290\n",
            ">read_159\n",
            ">read_234\n",
            ">read_162\n",
            ">read_417\n",
            ">read_3\n",
            ">read_435\n",
            ">read_396\n",
            ">read_412\n",
            ">read_345\n",
            ">read_391\n",
            ">read_136\n",
            ">read_297\n",
            ">read_83\n",
            ">read_89\n",
            ">read_438\n",
            ">read_470\n",
            ">read_39\n",
            ">read_161\n",
            ">read_384\n",
            ">read_460\n",
            ">read_41\n",
            ">read_390\n",
            ">read_173\n",
            ">read_337\n",
            ">read_255\n",
            ">read_457\n",
            ">read_118\n",
            ">read_305\n",
            ">read_194\n",
            ">read_322\n",
            ">read_360\n",
            ">read_368\n",
            ">read_43\n",
            ">read_151\n",
            ">read_211\n",
            ">read_307\n",
            ">read_347\n",
            ">read_352\n",
            ">read_106\n",
            ">read_153\n",
            ">read_269\n",
            ">read_385\n",
            ">read_11\n",
            ">read_387\n",
            ">read_239\n",
            ">read_276\n",
            ">read_256\n",
            ">read_441\n",
            ">read_98\n",
            ">read_224\n",
            ">read_34\n",
            ">read_316\n",
            ">read_92\n",
            ">read_346\n",
            ">read_139\n",
            ">read_477\n",
            ">read_348\n",
            ">read_375\n",
            ">read_17\n",
            ">read_243\n",
            ">read_127\n",
            ">read_319\n",
            ">read_85\n",
            ">read_206\n",
            ">read_1\n",
            ">read_430\n",
            ">read_20\n",
            ">read_334\n",
            ">read_68\n",
            ">read_358\n",
            ">read_120\n",
            ">read_268\n",
            ">read_123\n",
            ">read_388\n",
            ">read_67\n",
            ">read_445\n",
            ">read_179\n",
            ">read_314\n",
            ">read_207\n",
            ">read_286\n",
            ">read_171\n",
            ">read_261\n",
            ">read_132\n",
            ">read_327\n",
            ">read_394\n",
            ">read_456\n",
            ">read_313\n",
            ">read_455\n",
            ">read_22\n",
            ">read_186\n",
            ">read_99\n",
            ">read_272\n",
            ">read_339\n",
            ">read_432\n",
            ">read_152\n",
            ">read_328\n",
            ">read_42\n",
            ">read_142\n",
            ">read_49\n",
            ">read_108\n",
            ">read_169\n",
            ">read_428\n",
            ">read_53\n",
            ">read_302\n",
            ">read_420\n",
            ">read_476\n",
            ">read_165\n",
            ">read_466\n",
            ">read_113\n",
            ">read_442\n",
            ">read_354\n",
            ">read_374\n",
            ">read_87\n",
            ">read_356\n",
            ">read_343\n",
            ">read_446\n",
            ">read_76\n",
            ">read_80\n",
            ">read_209\n",
            ">read_461\n",
            ">read_236\n",
            ">read_326\n",
            ">read_40\n",
            ">read_373\n",
            ">read_181\n",
            ">read_202\n",
            ">read_18\n",
            ">read_247\n",
            ">read_331\n",
            ">read_332\n",
            ">read_112\n",
            ">read_419\n",
            ">read_167\n",
            ">read_421\n",
            ">read_459\n",
            ">read_279\n",
            ">read_205\n",
            ">read_60\n",
            ">read_292\n",
            ">read_253\n",
            ">read_77\n",
            ">read_304\n",
            ">read_353\n",
            ">read_440\n",
            ">read_291\n",
            ">read_103\n",
            ">read_100\n",
            ">read_284\n",
            ">read_59\n",
            ">read_30\n",
            ">read_218\n",
            ">read_8\n",
            ">read_439\n",
            ">read_277\n",
            ">read_138\n",
            ">read_180\n",
            ">read_64\n",
            ">read_115\n",
            ">read_117\n",
            ">read_66\n",
            ">read_47\n",
            ">read_450\n",
            ">read_444\n",
            ">read_10\n",
            ">read_158\n",
            ">read_377\n",
            ">read_188\n",
            ">read_187\n",
            ">read_14\n",
            ">read_222\n",
            ">read_149\n",
            ">read_271\n",
            ">read_424\n",
            ">read_129\n",
            ">read_121\n",
            ">read_90\n",
            ">read_27\n",
            ">read_72\n",
            ">read_472\n",
            ">read_125\n",
            ">read_298\n",
            ">read_91\n",
            ">read_410\n",
            ">read_210\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def find_duplicates(reads_list):\n",
        "    unique_reads_set = set()\n",
        "    duplicates = []\n",
        "    for read in reads_list:\n",
        "        if read in unique_reads_set:\n",
        "            duplicates.append(read)\n",
        "        else:\n",
        "            unique_reads_set.add(read)\n",
        "    return duplicates\n",
        "\n",
        "spect = read_fasta_list(fasta_filename)\n",
        "\n",
        "\n",
        "\n",
        "duplicate_reads = find_duplicates(spect)\n",
        "if duplicate_reads:\n",
        "    print(\"Duplicates found:\", duplicate_reads)\n",
        "\n",
        "print(len(duplicate_reads))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vLxG2lCxfDxB",
        "outputId": "f0c62cf8-a3b5-4555-8f6c-4aecbb381e43"
      },
      "execution_count": 125,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Duplicates found: ['GGAGTTAGCTTGGTGGCATC', 'ACACCTAATACATACGCGGA', 'TGGTGGCATCGTAATAACGT', 'TACTTTTGAACACCTAATAC', 'GTACTTTTGAACACCTAATA', 'GTAATAACGTATGATTTGCG', 'ATAACGTATGATTTGCGAGC', 'GTGGCATCGTAATAACGTAT', 'GCAATAAGGGGGAGTTAGCT', 'CAGCGTACTTTTGAACACCT', 'TATCGGCAATAAGGGGGAGT', 'TTGCGAGCCCAGTCAGCGTA', 'GTATGATTTGCGAGCCCAGT', 'TTAGCTTGGTGGCATCGTAA', 'ATAAGGGGGAGTTAGCTTGG', 'TAAGGGGGAGTTAGCTTGGT', 'AAGGGGGAGTTAGCTTGGTG', 'ATTTGCGAGCCCAGTCAGCG', 'ATCGGCAATAAGGGGGAGTT', 'CAGTCAGCGTACTTTTGAAC', 'GAGCCCAGTCAGCGTACTTT', 'AGCGTACTTTTGAACACCTA', 'AGGGGGAGTTAGCTTGGTGG', 'ACGTATGATTTGCGAGCCCA', 'CCAGTCAGCGTACTTTTGAA', 'GTTAGCTTGGTGGCATCGTA', 'TTGGTGGCATCGTAATAACG', 'CTTTTGAACACCTAATACAT', 'ATCGTAATAACGTATGATTT', 'TAATAACGTATGATTTGCGA', 'TTATCGGCAATAAGGGGGAG', 'CGGCAATAAGGGGGAGTTAG', 'CCCAGTCAGCGTACTTTTGA', 'TATGATTTGCGAGCCCAGTC', 'TTTGCGAGCCCAGTCAGCGT', 'TCGTAATAACGTATGATTTG', 'AGTTAGCTTGGTGGCATCGT', 'GCTTATCGGCAATAAGGGGG', 'AGTCAGCGTACTTTTGAACA', 'CGTACTTTTGAACACCTAAT', 'CAATAAGGGGGAGTTAGCTT', 'GCGAGCCCAGTCAGCGTACT', 'GCATCGTAATAACGTATGAT', 'AATAAGGGGGAGTTAGCTTG', 'ATGATTTGCGAGCCCAGTCA', 'GAGTTAGCTTGGTGGCATCG', 'AATAACGTATGATTTGCGAG', 'GAACACCTAATACATACGCG', 'CGAGCCCAGTCAGCGTACTT', 'GGGGAGTTAGCTTGGTGGCA', 'CGTAATAACGTATGATTTGC', 'CTTATCGGCAATAAGGGGGA', 'TGAACACCTAATACATACGC', 'GATTTGCGAGCCCAGTCAGC', 'TAACGTATGATTTGCGAGCC', 'AACGTATGATTTGCGAGCCC', 'AGCCCAGTCAGCGTACTTTT', 'GGCATCGTAATAACGTATGA', 'CTTGGTGGCATCGTAATAAC', 'GCTTGGTGGCATCGTAATAA', 'TAGCTTGGTGGCATCGTAAT', 'GGCAATAAGGGGGAGTTAGC', 'GGGGGAGTTAGCTTGGTGGC', 'ACTTTTGAACACCTAATACA', 'TGCGAGCCCAGTCAGCGTAC', 'GCGTACTTTTGAACACCTAA', 'AGCTTGGTGGCATCGTAATA', 'CGTATGATTTGCGAGCCCAG', 'TTGAACACCTAATACATACG', 'GCCCAGTCAGCGTACTTTTG', 'AACACCTAATACATACGCGG', 'TCAGCGTACTTTTGAACACC', 'GTCAGCGTACTTTTGAACAC', 'CATCGTAATAACGTATGATT', 'TGGCATCGTAATAACGTATG', 'CACCTAATACATACGCGGAT', 'TTTGAACACCTAATACATAC', 'GGGAGTTAGCTTGGTGGCAT', 'GGTGGCATCGTAATAACGTA', 'TCGGCAATAAGGGGGAGTTA', 'TTTTGAACACCTAATACATA', 'TGATTTGCGAGCCCAGTCAG']\n",
            "82\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMUo8/iL06RU/AXh6YmqoQd",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}