def hamming_distance(seq1, seq2):
    if len(seq1) != len(seq2):
        raise ValueError("Sequences are not of equal length")
    distance = 0
    for i in range(len(seq1)):
        if seq1[i] != seq2[i]:
            distance += 1
    return distance

def read_mapping_with_substitutions(reads, reference_genome, threshold):
    positions = {}
    for read in reads:
        read_length = len(read)
        for i in range(len(reference_genome) - read_length + 1):
            ref_subsequence = reference_genome[i:i+read_length]
            if hamming_distance(read, ref_subsequence) <= threshold:
                positions[read] = i
                break
    return positions

def generate_spectrum(reads, k):
    kmer_counts = Counter()
    for read in reads.values():
        for i in range(len(read) - k + 1):
            kmer = read[i:i + k]
            kmer_counts[kmer] += 1
    # Adjust filtering criteria if necessary
    spectrum = {kmer for kmer, count in kmer_counts.items() if count > 1}
    return spectrum

def build_de_bruijn_graph(spectrum, k):
    graph = defaultdict(list)
    for kmer in spectrum:
        prefix = kmer[:-1]
        suffix = kmer[1:]
        graph[prefix].append(suffix)
    return graph

def find_eulerian_path(graph):
    start_node = None
    for node in graph:
        if len(graph[node]) % 2 != 0:
            start_node = node
            break
    if not start_node:
        start_node = list(graph.keys())[0]
    
    path = []
    stack = [start_node]
    
    while stack:
        node = stack[-1]
        if node in graph and graph[node]:
            next_node = graph[node].pop()
            stack.append(next_node)
        else:
            path.append(stack.pop())
    
    return path[::-1]

def reconstruct_sequence_from_path(path):
    sequence = path[0]
    for node in path[1:]:
        sequence += node[-1]
    return sequence

def fasta_reader(filename):
    fasta_dict = {}
    with open(filename, 'r') as file:
        read_id = None
        sequence = []
        for line in file:
            line = line.strip()
            if line.startswith('>'):
                if read_id:
                    fasta_dict[read_id] = ''.join(sequence)
                read_id = line[1:]
                sequence = []
            else:
                sequence.append(line)
        if read_id:
            fasta_dict[read_id] = ''.join(sequence)
    return fasta_dict

def main(fasta_filename, k, threshold):
    fasta_dict = fasta_reader(fasta_filename)
    spectrum = generate_spectrum(fasta_dict, k)
    graph = build_de_bruijn_graph(spectrum, k)
    path = find_eulerian_path(graph)
    predicted_genome = reconstruct_sequence_from_path(path)
    
    mapped_positions = read_mapping_with_substitutions(fasta_dict.values(), predicted_genome, threshold)
    sorted_reads = sorted(fasta_dict.keys(), key=lambda read_id: mapped_positions.get(fasta_dict[read_id], float('inf')))
    
    return predicted_genome, sorted_reads, mapped_positions

fasta_filename = 'project2_sample1_spectrum.fasta'
k = 13
threshold = 4

predicted_genome, sorted_reads, mapped_positions = main(fasta_filename, k, threshold)
